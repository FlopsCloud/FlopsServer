// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	applyJoinFieldNames          = builder.RawFieldNames(&ApplyJoin{})
	applyJoinRows                = strings.Join(applyJoinFieldNames, ",")
	applyJoinRowsExpectAutoSet   = strings.Join(stringx.Remove(applyJoinFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	applyJoinRowsWithPlaceHolder = strings.Join(stringx.Remove(applyJoinFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	applyJoinModel interface {
		Insert(ctx context.Context, data *ApplyJoin) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ApplyJoin, error)
		Update(ctx context.Context, data *ApplyJoin) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultApplyJoinModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ApplyJoin struct {
		Id        uint64         `db:"id"`
		OrgId     uint64         `db:"org_id"`
		UserId    uint64         `db:"user_id"`
		Message   sql.NullString `db:"message"`
		Status    string         `db:"status"`
		CreatedAt time.Time      `db:"created_at"`
		UpdatedAt time.Time      `db:"updated_at"`
	}
)

func newApplyJoinModel(conn sqlx.SqlConn) *defaultApplyJoinModel {
	return &defaultApplyJoinModel{
		conn:  conn,
		table: "`apply_join`",
	}
}

func (m *defaultApplyJoinModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultApplyJoinModel) FindOne(ctx context.Context, id uint64) (*ApplyJoin, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", applyJoinRows, m.table)
	var resp ApplyJoin
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApplyJoinModel) Insert(ctx context.Context, data *ApplyJoin) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, applyJoinRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrgId, data.UserId, data.Message, data.Status)
	return ret, err
}

func (m *defaultApplyJoinModel) Update(ctx context.Context, data *ApplyJoin) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, applyJoinRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrgId, data.UserId, data.Message, data.Status, data.Id)
	return err
}

func (m *defaultApplyJoinModel) tableName() string {
	return m.table
}
