// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	instancesLogFieldNames          = builder.RawFieldNames(&InstancesLog{})
	instancesLogRows                = strings.Join(instancesLogFieldNames, ",")
	instancesLogRowsExpectAutoSet   = strings.Join(stringx.Remove(instancesLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	instancesLogRowsWithPlaceHolder = strings.Join(stringx.Remove(instancesLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	instancesLogModel interface {
		Insert(ctx context.Context, data *InstancesLog) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*InstancesLog, error)
		Update(ctx context.Context, data *InstancesLog) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultInstancesLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	InstancesLog struct {
		Id         uint64    `db:"id"`
		InstanceId uint64    `db:"instance_id"`
		UserId     uint64    `db:"user_id"` // 用户id
		Action     string    `db:"action"`  // 状态
		CreatedAt  time.Time `db:"created_at"`
		UpdatedAt  time.Time `db:"updated_at"`
	}
)

func newInstancesLogModel(conn sqlx.SqlConn) *defaultInstancesLogModel {
	return &defaultInstancesLogModel{
		conn:  conn,
		table: "`instances_log`",
	}
}

func (m *defaultInstancesLogModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultInstancesLogModel) FindOne(ctx context.Context, id uint64) (*InstancesLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", instancesLogRows, m.table)
	var resp InstancesLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInstancesLogModel) Insert(ctx context.Context, data *InstancesLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, instancesLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.InstanceId, data.UserId, data.Action)
	return ret, err
}

func (m *defaultInstancesLogModel) Update(ctx context.Context, data *InstancesLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, instancesLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.InstanceId, data.UserId, data.Action, data.Id)
	return err
}

func (m *defaultInstancesLogModel) tableName() string {
	return m.table
}
