// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	runningResourcesFieldNames          = builder.RawFieldNames(&RunningResources{})
	runningResourcesRows                = strings.Join(runningResourcesFieldNames, ",")
	runningResourcesRowsExpectAutoSet   = strings.Join(stringx.Remove(runningResourcesFieldNames, "`runres_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	runningResourcesRowsWithPlaceHolder = strings.Join(stringx.Remove(runningResourcesFieldNames, "`runres_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	runningResourcesModel interface {
		Insert(ctx context.Context, data *RunningResources) (sql.Result, error)
		FindOne(ctx context.Context, runresId uint64) (*RunningResources, error)
		Update(ctx context.Context, data *RunningResources) error
		Delete(ctx context.Context, runresId uint64) error
	}

	defaultRunningResourcesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RunningResources struct {
		RunresId       uint64       `db:"runres_id"`
		UserId         uint64       `db:"user_id"`       // 用户ID
		ResourceId     uint64       `db:"resource_id"`   // 使用资源类型ID
		ResourceName   string       `db:"resource_name"` // 使用资源类型ID
		OrgId          uint64       `db:"org_id"`        // 组织ID
		ResourceType   string       `db:"resource_type"` // 使用资源类型CPU,MEM,GPU,SSD,NET
		Qty            uint64       `db:"qty"`           // 使用数量
		Stat           string       `db:"stat"`          // 状态 init,started,stopped
		StartAt        sql.NullTime `db:"start_at"`      // 启动时间
		StopAt         sql.NullTime `db:"stop_at"`       // 停止时间
		CreatedAt      time.Time    `db:"created_at"`
		PayCycle       string       `db:"pay_cycle"`     // monthly，yearly
		PayCycleNum    uint64       `db:"pay_cycle_num"` // 多久
		InstanceId     uint64       `db:"instance_id"`   // 实例id
		HourlyPrice    uint64       `db:"hourly_price"`
		HourlyDiscount uint64       `db:"hourly_discount"`
	}
)

func newRunningResourcesModel(conn sqlx.SqlConn) *defaultRunningResourcesModel {
	return &defaultRunningResourcesModel{
		conn:  conn,
		table: "`running_resources`",
	}
}

func (m *defaultRunningResourcesModel) Delete(ctx context.Context, runresId uint64) error {
	query := fmt.Sprintf("delete from %s where `runres_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, runresId)
	return err
}

func (m *defaultRunningResourcesModel) FindOne(ctx context.Context, runresId uint64) (*RunningResources, error) {
	query := fmt.Sprintf("select %s from %s where `runres_id` = ? limit 1", runningResourcesRows, m.table)
	var resp RunningResources
	err := m.conn.QueryRowCtx(ctx, &resp, query, runresId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRunningResourcesModel) Insert(ctx context.Context, data *RunningResources) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, runningResourcesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ResourceId, data.ResourceName, data.OrgId, data.ResourceType, data.Qty, data.Stat, data.StartAt, data.StopAt, data.PayCycle, data.PayCycleNum, data.InstanceId, data.HourlyPrice, data.HourlyDiscount)
	return ret, err
}

func (m *defaultRunningResourcesModel) Update(ctx context.Context, data *RunningResources) error {
	query := fmt.Sprintf("update %s set %s where `runres_id` = ?", m.table, runningResourcesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ResourceId, data.ResourceName, data.OrgId, data.ResourceType, data.Qty, data.Stat, data.StartAt, data.StopAt, data.PayCycle, data.PayCycleNum, data.InstanceId, data.HourlyPrice, data.HourlyDiscount, data.RunresId)
	return err
}

func (m *defaultRunningResourcesModel) tableName() string {
	return m.table
}
