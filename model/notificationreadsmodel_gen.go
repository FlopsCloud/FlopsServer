// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	notificationReadsFieldNames          = builder.RawFieldNames(&NotificationReads{})
	notificationReadsRows                = strings.Join(notificationReadsFieldNames, ",")
	notificationReadsRowsExpectAutoSet   = strings.Join(stringx.Remove(notificationReadsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	notificationReadsRowsWithPlaceHolder = strings.Join(stringx.Remove(notificationReadsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	notificationReadsModel interface {
		Insert(ctx context.Context, data *NotificationReads) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*NotificationReads, error)
		FindOneByNotificationIdUserId(ctx context.Context, notificationId uint64, userId uint64) (*NotificationReads, error)
		Update(ctx context.Context, data *NotificationReads) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultNotificationReadsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	NotificationReads struct {
		Id             uint64    `db:"id"`
		NotificationId uint64    `db:"notification_id"` // 通知ID
		UserId         uint64    `db:"user_id"`         // 用户ID
		ReadAt         time.Time `db:"read_at"`
		IsRead         uint64    `db:"is_read"`
	}
)

func newNotificationReadsModel(conn sqlx.SqlConn) *defaultNotificationReadsModel {
	return &defaultNotificationReadsModel{
		conn:  conn,
		table: "`notification_reads`",
	}
}

func (m *defaultNotificationReadsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultNotificationReadsModel) FindOne(ctx context.Context, id uint64) (*NotificationReads, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", notificationReadsRows, m.table)
	var resp NotificationReads
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNotificationReadsModel) FindOneByNotificationIdUserId(ctx context.Context, notificationId uint64, userId uint64) (*NotificationReads, error) {
	var resp NotificationReads
	query := fmt.Sprintf("select %s from %s where `notification_id` = ? and `user_id` = ? limit 1", notificationReadsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, notificationId, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNotificationReadsModel) Insert(ctx context.Context, data *NotificationReads) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, notificationReadsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.NotificationId, data.UserId, data.ReadAt, data.IsRead)
	return ret, err
}

func (m *defaultNotificationReadsModel) Update(ctx context.Context, newData *NotificationReads) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, notificationReadsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.NotificationId, newData.UserId, newData.ReadAt, newData.IsRead, newData.Id)
	return err
}

func (m *defaultNotificationReadsModel) tableName() string {
	return m.table
}
