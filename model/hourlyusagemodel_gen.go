// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	hourlyUsageFieldNames          = builder.RawFieldNames(&HourlyUsage{})
	hourlyUsageRows                = strings.Join(hourlyUsageFieldNames, ",")
	hourlyUsageRowsExpectAutoSet   = strings.Join(stringx.Remove(hourlyUsageFieldNames, "`usage_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	hourlyUsageRowsWithPlaceHolder = strings.Join(stringx.Remove(hourlyUsageFieldNames, "`usage_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	hourlyUsageModel interface {
		Insert(ctx context.Context, data *HourlyUsage) (sql.Result, error)
		FindOne(ctx context.Context, usageId uint64) (*HourlyUsage, error)
		Update(ctx context.Context, data *HourlyUsage) error
		Delete(ctx context.Context, usageId uint64) error
	}

	defaultHourlyUsageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	HourlyUsage struct {
		UsageId       uint64    `db:"usage_id"`
		OrgId         uint64    `db:"org_id"`          // 组织ID
		UserId        uint64    `db:"user_id"`         // 用户ID
		UsageDate     time.Time `db:"usage_date"`      // 使用日期
		RunresId      uint64    `db:"runres_id"`       // 使用资源类型ID
		InstanceId    uint64    `db:"instance_id"`     // 使用实例ID
		Type          int64     `db:"type"`            // 0 表示 ins 1 表示 resource
		Fee           uint64    `db:"fee"`             // 费用（分钱）
		IsCharged     int64     `db:"is_charged"`      // 是否已经扣费 0 表示未扣费 1 表示已经扣费
		UnitHourPrice int64     `db:"unit_hour_price"` // 使用资源小时价格
		DiscountId    uint64    `db:"discount_id"`     // id 空 表示不打折
		Discount      int64     `db:"discount"`        // 100 表示 10 折
		Hournum       uint64    `db:"hournum"`         // 日期 20240101
		Daynum        uint64    `db:"daynum"`          // 日期 20240101
		MinuteBegin   uint64    `db:"minute_begin"`    // 开始计费分钟
		MinuteEnd     uint64    `db:"minute_end"`      // 结束计费分钟
		MinuteTotal   uint64    `db:"minute_total"`    // 合计分钟数
	}
)

func newHourlyUsageModel(conn sqlx.SqlConn) *defaultHourlyUsageModel {
	return &defaultHourlyUsageModel{
		conn:  conn,
		table: "`hourly_usage`",
	}
}

func (m *defaultHourlyUsageModel) Delete(ctx context.Context, usageId uint64) error {
	query := fmt.Sprintf("delete from %s where `usage_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, usageId)
	return err
}

func (m *defaultHourlyUsageModel) FindOne(ctx context.Context, usageId uint64) (*HourlyUsage, error) {
	query := fmt.Sprintf("select %s from %s where `usage_id` = ? limit 1", hourlyUsageRows, m.table)
	var resp HourlyUsage
	err := m.conn.QueryRowCtx(ctx, &resp, query, usageId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHourlyUsageModel) Insert(ctx context.Context, data *HourlyUsage) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, hourlyUsageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrgId, data.UserId, data.UsageDate, data.RunresId, data.InstanceId, data.Type, data.Fee, data.IsCharged, data.UnitHourPrice, data.DiscountId, data.Discount, data.Hournum, data.Daynum, data.MinuteBegin, data.MinuteEnd, data.MinuteTotal)
	return ret, err
}

func (m *defaultHourlyUsageModel) Update(ctx context.Context, data *HourlyUsage) error {
	query := fmt.Sprintf("update %s set %s where `usage_id` = ?", m.table, hourlyUsageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrgId, data.UserId, data.UsageDate, data.RunresId, data.InstanceId, data.Type, data.Fee, data.IsCharged, data.UnitHourPrice, data.DiscountId, data.Discount, data.Hournum, data.Daynum, data.MinuteBegin, data.MinuteEnd, data.MinuteTotal, data.UsageId)
	return err
}

func (m *defaultHourlyUsageModel) tableName() string {
	return m.table
}
