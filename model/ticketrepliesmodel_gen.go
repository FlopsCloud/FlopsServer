// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ticketRepliesFieldNames          = builder.RawFieldNames(&TicketReplies{})
	ticketRepliesRows                = strings.Join(ticketRepliesFieldNames, ",")
	ticketRepliesRowsExpectAutoSet   = strings.Join(stringx.Remove(ticketRepliesFieldNames, "`reply_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	ticketRepliesRowsWithPlaceHolder = strings.Join(stringx.Remove(ticketRepliesFieldNames, "`reply_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	ticketRepliesModel interface {
		Insert(ctx context.Context, data *TicketReplies) (sql.Result, error)
		FindOne(ctx context.Context, replyId uint64) (*TicketReplies, error)
		Update(ctx context.Context, data *TicketReplies) error
		Delete(ctx context.Context, replyId uint64) error
	}

	defaultTicketRepliesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TicketReplies struct {
		ReplyId   uint64    `db:"reply_id"`
		TicketId  uint64    `db:"ticket_id"` // 工单ID
		UserId    uint64    `db:"user_id"`   // 回复用户ID
		Content   string    `db:"content"`   // 回复内容
		CreatedAt time.Time `db:"created_at"`
		Images    string    `db:"images"` // 逗号分割图片地址
	}
)

func newTicketRepliesModel(conn sqlx.SqlConn) *defaultTicketRepliesModel {
	return &defaultTicketRepliesModel{
		conn:  conn,
		table: "`ticket_replies`",
	}
}

func (m *defaultTicketRepliesModel) Delete(ctx context.Context, replyId uint64) error {
	query := fmt.Sprintf("delete from %s where `reply_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, replyId)
	return err
}

func (m *defaultTicketRepliesModel) FindOne(ctx context.Context, replyId uint64) (*TicketReplies, error) {
	query := fmt.Sprintf("select %s from %s where `reply_id` = ? limit 1", ticketRepliesRows, m.table)
	var resp TicketReplies
	err := m.conn.QueryRowCtx(ctx, &resp, query, replyId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTicketRepliesModel) Insert(ctx context.Context, data *TicketReplies) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, ticketRepliesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TicketId, data.UserId, data.Content, data.Images)
	return ret, err
}

func (m *defaultTicketRepliesModel) Update(ctx context.Context, data *TicketReplies) error {
	query := fmt.Sprintf("update %s set %s where `reply_id` = ?", m.table, ticketRepliesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.TicketId, data.UserId, data.Content, data.Images, data.ReplyId)
	return err
}

func (m *defaultTicketRepliesModel) tableName() string {
	return m.table
}
