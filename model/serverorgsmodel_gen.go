// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	serverOrgsFieldNames          = builder.RawFieldNames(&ServerOrgs{})
	serverOrgsRows                = strings.Join(serverOrgsFieldNames, ",")
	serverOrgsRowsExpectAutoSet   = strings.Join(stringx.Remove(serverOrgsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	serverOrgsRowsWithPlaceHolder = strings.Join(stringx.Remove(serverOrgsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	serverOrgsModel interface {
		Insert(ctx context.Context, data *ServerOrgs) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ServerOrgs, error)
		Update(ctx context.Context, data *ServerOrgs) error
		Delete(ctx context.Context, id int64) error
		DeleteByServerOrg(ctx context.Context,  serverOrg *ServerOrgs) error
	}

	defaultServerOrgsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ServerOrgs struct {
		Id        int64     `db:"id"`
		ServerId  uint64    `db:"server_id"`
		OrgId     uint64    `db:"org_id"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newServerOrgsModel(conn sqlx.SqlConn) *defaultServerOrgsModel {
	return &defaultServerOrgsModel{
		conn:  conn,
		table: "`server_orgs`",
	}
}

func (m *defaultServerOrgsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultServerOrgsModel) DeleteByServerOrg(ctx context.Context, serverOrg *ServerOrgs) error {
	query := fmt.Sprintf("delete from %s where `server_id` = ? and `org_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, serverOrg.ServerId,serverOrg.OrgId)
	return err
}

func (m *defaultServerOrgsModel) FindOne(ctx context.Context, id int64) (*ServerOrgs, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", serverOrgsRows, m.table)
	var resp ServerOrgs
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultServerOrgsModel) Insert(ctx context.Context, data *ServerOrgs) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, serverOrgsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ServerId, data.OrgId)
	return ret, err
}

func (m *defaultServerOrgsModel) Update(ctx context.Context, data *ServerOrgs) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, serverOrgsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ServerId, data.OrgId, data.Id)
	return err
}

func (m *defaultServerOrgsModel) tableName() string {
	return m.table
}
