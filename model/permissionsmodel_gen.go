// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	permissionsFieldNames          = builder.RawFieldNames(&Permissions{})
	permissionsRows                = strings.Join(permissionsFieldNames, ",")
	permissionsRowsExpectAutoSet   = strings.Join(stringx.Remove(permissionsFieldNames, "`permission_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	permissionsRowsWithPlaceHolder = strings.Join(stringx.Remove(permissionsFieldNames, "`permission_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	permissionsModel interface {
		Insert(ctx context.Context, data *Permissions) (sql.Result, error)
		FindOne(ctx context.Context, permissionId uint64) (*Permissions, error)
		FindOneByPermissionName(ctx context.Context, permissionName string) (*Permissions, error)
		Update(ctx context.Context, data *Permissions) error
		Delete(ctx context.Context, permissionId uint64) error
	}

	defaultPermissionsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Permissions struct {
		PermissionId   uint64         `db:"permission_id"`
		PermissionName string         `db:"permission_name"`
		Description    sql.NullString `db:"description"`
		CreatedAt      time.Time      `db:"created_at"`
	}
)

func newPermissionsModel(conn sqlx.SqlConn) *defaultPermissionsModel {
	return &defaultPermissionsModel{
		conn:  conn,
		table: "`permissions`",
	}
}

func (m *defaultPermissionsModel) Delete(ctx context.Context, permissionId uint64) error {
	query := fmt.Sprintf("delete from %s where `permission_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, permissionId)
	return err
}

func (m *defaultPermissionsModel) FindOne(ctx context.Context, permissionId uint64) (*Permissions, error) {
	query := fmt.Sprintf("select %s from %s where `permission_id` = ? limit 1", permissionsRows, m.table)
	var resp Permissions
	err := m.conn.QueryRowCtx(ctx, &resp, query, permissionId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPermissionsModel) FindOneByPermissionName(ctx context.Context, permissionName string) (*Permissions, error) {
	var resp Permissions
	query := fmt.Sprintf("select %s from %s where `permission_name` = ? limit 1", permissionsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, permissionName)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPermissionsModel) Insert(ctx context.Context, data *Permissions) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, permissionsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.PermissionName, data.Description)
	return ret, err
}

func (m *defaultPermissionsModel) Update(ctx context.Context, newData *Permissions) error {
	query := fmt.Sprintf("update %s set %s where `permission_id` = ?", m.table, permissionsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.PermissionName, newData.Description, newData.PermissionId)
	return err
}

func (m *defaultPermissionsModel) tableName() string {
	return m.table
}
