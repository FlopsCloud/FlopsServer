// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	 
	"fmt"
	  
	"github.com/zeromicro/go-zero/core/stores/sqlx"
 
	// "fca/api/internal/types"
)
 
 

type Org struct {
	UserId   uint64 `json:"userId"`
	Role string `json:"role"`
	OrgId   uint64 `json:"orgId"`
	OrgName string `json:"orgName"`
}
func (m *defaultOrgsUsersModel) DeleteEx(ctx context.Context, uid uint64,oid uint64) error {
	query := fmt.Sprintf("delete from %s where `user_id` = ? and `org_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, uid,oid)
	return err
}

func (m *defaultOrgsUsersModel) FindAllByUserId(ctx context.Context,   userId uint64) (*[]Org, error) {
	query := fmt.Sprintf("select orgs_users.user_id, orgs_users.role, orgs_users.org_id, organizations.org_name from `orgs_users`,organizations where orgs_users.org_id=organizations.org_id and  orgs_users.user_id=%d", userId)
	var resp []Org
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
 