// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tagsFieldNames          = builder.RawFieldNames(&Tags{})
	tagsRows                = strings.Join(tagsFieldNames, ",")
	tagsRowsExpectAutoSet   = strings.Join(stringx.Remove(tagsFieldNames, "`tag_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tagsRowsWithPlaceHolder = strings.Join(stringx.Remove(tagsFieldNames, "`tag_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tagsModel interface {
		Insert(ctx context.Context, data *Tags) (sql.Result, error)
		FindOne(ctx context.Context, tagId uint64) (*Tags, error)
		Update(ctx context.Context, data *Tags) error
		Delete(ctx context.Context, tagId uint64) error
		FindAll(ctx context.Context) (*[]Tags, error)

	}

	defaultTagsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Tags struct {
		TagId     uint64    `db:"tag_id"`
		TagName   string    `db:"tag_name"` // 标签名称
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newTagsModel(conn sqlx.SqlConn) *defaultTagsModel {
	return &defaultTagsModel{
		conn:  conn,
		table: "`tags`",
	}
}

func (m *defaultTagsModel) Delete(ctx context.Context, tagId uint64) error {
	query := fmt.Sprintf("delete from %s where `tag_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, tagId)
	return err
}



func (m *defaultTagsModel) FindAll(ctx context.Context ) (*[]Tags, error) {

	 

	query := fmt.Sprintf("select %s from %s", tagsRows, m.table)
	var resp []Tags
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultTagsModel) FindOne(ctx context.Context, tagId uint64) (*Tags, error) {

	
	query := fmt.Sprintf("select %s from %s where `tag_id` = ? limit 1", tagsRows, m.table)
	var resp Tags
	err := m.conn.QueryRowCtx(ctx, &resp, query, tagId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTagsModel) Insert(ctx context.Context, data *Tags) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, tagsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TagName)
	return ret, err
}

func (m *defaultTagsModel) Update(ctx context.Context, data *Tags) error {
	query := fmt.Sprintf("update %s set %s where `tag_id` = ?", m.table, tagsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.TagName, data.TagId)
	return err
}

func (m *defaultTagsModel) tableName() string {
	return m.table
}
