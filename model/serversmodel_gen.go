// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	serversFieldNames          = builder.RawFieldNames(&Servers{})
	serversRows                = strings.Join(serversFieldNames, ",")
	serversRowsExpectAutoSet   = strings.Join(stringx.Remove(serversFieldNames, "`server_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	serversRowsWithPlaceHolder = strings.Join(stringx.Remove(serversFieldNames, "`server_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	serversModel interface {
		Insert(ctx context.Context, data *Servers) (sql.Result, error)
		FindOne(ctx context.Context, serverId uint64) (*Servers, error)
		Update(ctx context.Context, data *Servers) error
		Delete(ctx context.Context, serverId uint64) error
		FindList(ctx context.Context, condition string) (*[]Servers, error)
		Count(ctx context.Context, condition string) (int, error)
	}

	defaultServersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Servers struct {
		ServerId         uint64    `db:"server_id"`
		ServerName       string    `db:"server_name"`
		IsOnline         int64     `db:"is_online"`
		BillingMethod    uint64    `db:"billing_method"` // 计费方式
		RegionId         uint64    `db:"region_id"`      // 地区
		IsPayMin         int64     `db:"is_pay_min"`
		IsPayDaily       int64     `db:"is_pay_daily"`
		IsPayMonthly     int64     `db:"is_pay_monthly"`
		IsPayYearly      int64     `db:"is_pay_yearly"`
		PayPrices        string    `db:"pay_prices"`
		DiskPayPrices    string    `db:"disk_pay_prices"`
		Supplier         uint64    `db:"supplier"`           // 供应商
		Processor        uint64    `db:"processor"`          // 处理器类型
		GpuModel         uint64    `db:"gpu_model"`          // GPU型号
		GpuCount         uint64    `db:"gpu_count"`          // GPU数量
		GpuUsed          int64     `db:"gpu_used"`           // 已使用GPU数量
		GpuMem           uint64    `db:"gpu_mem"`            // 显存
		CpuModel         uint64    `db:"cpu_model"`          // CPU型号
		CpuCores         uint64    `db:"cpu_cores"`          // CPU核数
		CpuFrequency     int64     `db:"cpu_frequency"`      // cpu频率
		ThreadCount      uint64    `db:"thread_count"`       // 处理器线程数量
		Memory           uint64    `db:"memory"`             // 内存(GB)
		SystemDisk       uint64    `db:"system_disk"`        // 系统盘(GB)
		DataDisk         uint64    `db:"data_disk"`          // 数据盘(GB)
		MaxDataDisk      uint64    `db:"max_data_disk"`      // 最大数据盘(GB)
		SpeedDesc        string    `db:"speed_desc"`         // 运算速度
		OsName           string    `db:"os_name"`            // 操作系统名称
		OsVersion        string    `db:"os_version"`         // 操作系统版本号
		KernelVersion    string    `db:"kernel_version"`     // 内核版本
		GpuDriver        string    `db:"gpu_driver"`         // GPU驱动
		CudaVersion      string    `db:"cuda_version"`       // cuda版本
		DockerVersion    string    `db:"docker_version"`     // Docker版本号
		NvidiaDocker     int64     `db:"nvidia_docker"`      // 是否支持nvidia-docker
		NetworkDownSpeed int64     `db:"network_down_speed"` // 网络下载速度
		NetworkUpSpeed   int64     `db:"network_up_speed"`   // 网络上传速度
		AgentVersion     string    `db:"agent_version"`      // 代理版本号
		Cost             uint64    `db:"cost"`               // 费用
		Available        uint64    `db:"available"`          // 空闲数量
		Total            uint64    `db:"total"`              // 可用总量
		ExpireDate       time.Time `db:"expire_date"`        // 到期时间
		CreatedAt        time.Time `db:"created_at"`
		UpdatedAt        time.Time `db:"updated_at"`
	}
)

func newServersModel(conn sqlx.SqlConn) *defaultServersModel {
	return &defaultServersModel{
		conn:  conn,
		table: "`servers`",
	}
}

func (m *defaultServersModel) Delete(ctx context.Context, serverId uint64) error {
	query := fmt.Sprintf("delete from %s where `server_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, serverId)
	return err
}

func (m *defaultServersModel) FindOne(ctx context.Context, serverId uint64) (*Servers, error) {
	query := fmt.Sprintf("select %s from %s where `server_id` = ? limit 1", serversRows, m.table)
	var resp Servers
	err := m.conn.QueryRowCtx(ctx, &resp, query, serverId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultServersModel) Insert(ctx context.Context, data *Servers) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, serversRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ServerName, data.IsOnline, data.BillingMethod, data.RegionId, data.IsPayMin, data.IsPayDaily, data.IsPayMonthly, data.IsPayYearly, data.PayPrices, data.DiskPayPrices, data.Supplier, data.Processor, data.GpuModel, data.GpuCount, data.GpuUsed, data.GpuMem, data.CpuModel, data.CpuCores, data.CpuFrequency, data.ThreadCount, data.Memory, data.SystemDisk, data.DataDisk, data.MaxDataDisk, data.SpeedDesc, data.OsName, data.OsVersion, data.KernelVersion, data.GpuDriver, data.CudaVersion, data.DockerVersion, data.NvidiaDocker, data.NetworkDownSpeed, data.NetworkUpSpeed, data.AgentVersion, data.Cost, data.Available, data.Total, data.ExpireDate)
	return ret, err
}

func (m *defaultServersModel) Update(ctx context.Context, data *Servers) error {
	query := fmt.Sprintf("update %s set %s where `server_id` = ?", m.table, serversRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ServerName, data.IsOnline, data.BillingMethod, data.RegionId, data.IsPayMin, data.IsPayDaily, data.IsPayMonthly, data.IsPayYearly, data.PayPrices, data.DiskPayPrices, data.Supplier, data.Processor, data.GpuModel, data.GpuCount, data.GpuUsed, data.GpuMem, data.CpuModel, data.CpuCores, data.CpuFrequency, data.ThreadCount, data.Memory, data.SystemDisk, data.DataDisk, data.MaxDataDisk, data.SpeedDesc, data.OsName, data.OsVersion, data.KernelVersion, data.GpuDriver, data.CudaVersion, data.DockerVersion, data.NvidiaDocker, data.NetworkDownSpeed, data.NetworkUpSpeed, data.AgentVersion, data.Cost, data.Available, data.Total, data.ExpireDate, data.ServerId)
	return err
}

func (m *defaultServersModel) tableName() string {
	return m.table
}
