// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	usersFieldNames          = builder.RawFieldNames(&Users{})
	usersRows                = strings.Join(usersFieldNames, ",")
	usersRowsExpectAutoSet   = strings.Join(stringx.Remove(usersFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	usersRowsWithPlaceHolder = strings.Join(stringx.Remove(usersFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	usersModel interface {
		Insert(ctx context.Context, data *Users) (sql.Result, error)
		FindOne(ctx context.Context, userId uint64) (*Users, error)
		FindOneByEmail(ctx context.Context, email string) (*Users, error)
		Update(ctx context.Context, data *Users) error
		Delete(ctx context.Context, userId uint64) error
	}

	defaultUsersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Users struct {
		UserId       uint64    `db:"user_id"`
		Username     string    `db:"username"`      // 用户姓名
		Nickname     string    `db:"nickname"`      // 昵称
		Email        string    `db:"email"`         // 用户邮箱
		Phone        string    `db:"phone"`         // 电话号码
		PasswordHash string    `db:"password_hash"` // 用户密码
		Balance      int64     `db:"balance"`       // 余额
		CreatedAt    time.Time `db:"created_at"`
		UpdatedAt    time.Time `db:"updated_at"`
		IsDeleted    uint64    `db:"is_deleted"`    // 删除标记
		IsMaster     uint64    `db:"is_master"`     // 主账号
		ShareBalance uint64    `db:"share_balance"` // 是否共享主账号余额
		AccX         string    `db:"acc_x"`         // twitter account
		AccGoogle    string    `db:"acc_google"`    // google account
		HeadUrl      string    `db:"head_url"`      // 头像
	}
)

func newUsersModel(conn sqlx.SqlConn) *defaultUsersModel {
	return &defaultUsersModel{
		conn:  conn,
		table: "`users`",
	}
}

func (m *defaultUsersModel) Delete(ctx context.Context, userId uint64) error {
	query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userId)
	return err
}

func (m *defaultUsersModel) FindOne(ctx context.Context, userId uint64) (*Users, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", usersRows, m.table)
	var resp Users
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByEmail(ctx context.Context, email string) (*Users, error) {
	var resp Users
	query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", usersRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, email)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) Insert(ctx context.Context, data *Users) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, usersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Username, data.Nickname, data.Email, data.Phone, data.PasswordHash, data.Balance, data.IsDeleted, data.IsMaster, data.ShareBalance, data.AccX, data.AccGoogle, data.HeadUrl)
	return ret, err
}

func (m *defaultUsersModel) Update(ctx context.Context, newData *Users) error {
	query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, usersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Username, newData.Nickname, newData.Email, newData.Phone, newData.PasswordHash, newData.Balance, newData.IsDeleted, newData.IsMaster, newData.ShareBalance, newData.AccX, newData.AccGoogle, newData.HeadUrl, newData.UserId)
	return err
}

func (m *defaultUsersModel) tableName() string {
	return m.table
}
