// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dailyUsageFieldNames          = builder.RawFieldNames(&DailyUsage{})
	dailyUsageRows                = strings.Join(dailyUsageFieldNames, ",")
	dailyUsageRowsExpectAutoSet   = strings.Join(stringx.Remove(dailyUsageFieldNames, "`usage_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	dailyUsageRowsWithPlaceHolder = strings.Join(stringx.Remove(dailyUsageFieldNames, "`usage_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	dailyUsageModel interface {
		Insert(ctx context.Context, data *DailyUsage) (sql.Result, error)
		FindOne(ctx context.Context, usageId uint64) (*DailyUsage, error)
		Update(ctx context.Context, data *DailyUsage) error
		Delete(ctx context.Context, usageId uint64) error
	}

	defaultDailyUsageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	DailyUsage struct {
		UsageId         uint64    `db:"usage_id"`
		OrgId           uint64    `db:"org_id"`            // 组织ID
		UserId          uint64    `db:"user_id"`           // 用户ID
		UsageDate       time.Time `db:"usage_date"`        // 使用日期
		ResourceId      uint64    `db:"resource_id"`       // 使用资源类型ID
		UsageMinAmount  int64     `db:"usage_min_amount"`  // 使用资源分钟数
		UsageHourAmount int64     `db:"usage_hour_amount"` // 使用资源小时数
		UnitHourPrice   int64     `db:"unit_hour_price"`   // 使用资源小时价格
		DiscountId      uint64    `db:"discount_id"`       // id 空 表示不打折
		Discount        int64     `db:"discount"`          // 100 表示 10 折
	}
)

func newDailyUsageModel(conn sqlx.SqlConn) *defaultDailyUsageModel {
	return &defaultDailyUsageModel{
		conn:  conn,
		table: "`daily_usage`",
	}
}

func (m *defaultDailyUsageModel) Delete(ctx context.Context, usageId uint64) error {
	query := fmt.Sprintf("delete from %s where `usage_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, usageId)
	return err
}

func (m *defaultDailyUsageModel) FindOne(ctx context.Context, usageId uint64) (*DailyUsage, error) {
	query := fmt.Sprintf("select %s from %s where `usage_id` = ? limit 1", dailyUsageRows, m.table)
	var resp DailyUsage
	err := m.conn.QueryRowCtx(ctx, &resp, query, usageId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDailyUsageModel) Insert(ctx context.Context, data *DailyUsage) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, dailyUsageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrgId, data.UserId, data.UsageDate, data.ResourceId, data.UsageMinAmount, data.UsageHourAmount, data.UnitHourPrice, data.DiscountId, data.Discount)
	return ret, err
}

func (m *defaultDailyUsageModel) Update(ctx context.Context, data *DailyUsage) error {
	query := fmt.Sprintf("update %s set %s where `usage_id` = ?", m.table, dailyUsageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrgId, data.UserId, data.UsageDate, data.ResourceId, data.UsageMinAmount, data.UsageHourAmount, data.UnitHourPrice, data.DiscountId, data.Discount, data.UsageId)
	return err
}

func (m *defaultDailyUsageModel) tableName() string {
	return m.table
}
