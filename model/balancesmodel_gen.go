// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	balancesFieldNames          = builder.RawFieldNames(&Balances{})
	balancesRows                = strings.Join(balancesFieldNames, ",")
	balancesRowsExpectAutoSet   = strings.Join(stringx.Remove(balancesFieldNames, "`balance_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	balancesRowsWithPlaceHolder = strings.Join(stringx.Remove(balancesFieldNames, "`balance_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	balancesModel interface {
		Insert(ctx context.Context, data *Balances) (sql.Result, error)
		FindOne(ctx context.Context, balanceId int64) (*Balances, error)
		Update(ctx context.Context, data *Balances) error
		Delete(ctx context.Context, balanceId int64) error
	}

	defaultBalancesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Balances struct {
		BalanceId    int64     `db:"balance_id"`    // ID
		OrgId        uint64    `db:"org_id"`        // 组织ID
		UserId       uint64    `db:"user_id"`       // 用户ID
		Balance      int64     `db:"balance"`       // 余额
		CurrencyCode string    `db:"currency_code"` // 币种代号
		CreatedAt    time.Time `db:"created_at"`    // 创建时间
		UpdatedAt    time.Time `db:"updated_at"`    // 更新时间
	}
)

func newBalancesModel(conn sqlx.SqlConn) *defaultBalancesModel {
	return &defaultBalancesModel{
		conn:  conn,
		table: "`balances`",
	}
}

func (m *defaultBalancesModel) Delete(ctx context.Context, balanceId int64) error {
	query := fmt.Sprintf("delete from %s where `balance_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, balanceId)
	return err
}

func (m *defaultBalancesModel) FindOne(ctx context.Context, balanceId int64) (*Balances, error) {
	query := fmt.Sprintf("select %s from %s where `balance_id` = ? limit 1", balancesRows, m.table)
	var resp Balances
	err := m.conn.QueryRowCtx(ctx, &resp, query, balanceId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBalancesModel) Insert(ctx context.Context, data *Balances) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, balancesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrgId, data.UserId, data.Balance, data.CurrencyCode)
	return ret, err
}

func (m *defaultBalancesModel) Update(ctx context.Context, data *Balances) error {
	query := fmt.Sprintf("update %s set %s where `balance_id` = ?", m.table, balancesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrgId, data.UserId, data.Balance, data.CurrencyCode, data.BalanceId)
	return err
}

func (m *defaultBalancesModel) tableName() string {
	return m.table
}
