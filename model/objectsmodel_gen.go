// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	objectsFieldNames          = builder.RawFieldNames(&Objects{})
	objectsRows                = strings.Join(objectsFieldNames, ",")
	objectsRowsExpectAutoSet   = strings.Join(stringx.Remove(objectsFieldNames, "`obj_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	objectsRowsWithPlaceHolder = strings.Join(stringx.Remove(objectsFieldNames, "`obj_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	objectsModel interface {
		Insert(ctx context.Context, data *Objects) (sql.Result, error)
		FindOne(ctx context.Context, objId uint64) (*Objects, error)
		Update(ctx context.Context, data *Objects) error
		Delete(ctx context.Context, objId uint64) error
	}

	defaultObjectsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Objects struct {
		ObjId     uint64    `db:"obj_id"`    // 对象ID
		BucketId  uint64    `db:"bucket_id"` // 桶ID
		UserId    uint64    `db:"user_id"`   // 冗余用户ID
		Key       string    `db:"Key"`       // 对象名称
		Path      string    `db:"Path"`      // 区域
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newObjectsModel(conn sqlx.SqlConn) *defaultObjectsModel {
	return &defaultObjectsModel{
		conn:  conn,
		table: "`objects`",
	}
}

func (m *defaultObjectsModel) Delete(ctx context.Context, objId uint64) error {
	query := fmt.Sprintf("delete from %s where `obj_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, objId)
	return err
}

func (m *defaultObjectsModel) FindOne(ctx context.Context, objId uint64) (*Objects, error) {
	query := fmt.Sprintf("select %s from %s where `obj_id` = ? limit 1", objectsRows, m.table)
	var resp Objects
	err := m.conn.QueryRowCtx(ctx, &resp, query, objId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultObjectsModel) Insert(ctx context.Context, data *Objects) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, objectsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BucketId, data.UserId, data.Key, data.Path)
	return ret, err
}

func (m *defaultObjectsModel) Update(ctx context.Context, data *Objects) error {
	query := fmt.Sprintf("update %s set %s where `obj_id` = ?", m.table, objectsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.BucketId, data.UserId, data.Key, data.Path, data.ObjId)
	return err
}

func (m *defaultObjectsModel) tableName() string {
	return m.table
}
