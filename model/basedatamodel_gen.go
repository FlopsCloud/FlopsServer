// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	baseDataFieldNames          = builder.RawFieldNames(&BaseData{})
	baseDataRows                = strings.Join(baseDataFieldNames, ",")
	baseDataRowsExpectAutoSet   = strings.Join(stringx.Remove(baseDataFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	baseDataRowsWithPlaceHolder = strings.Join(stringx.Remove(baseDataFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	baseDataModel interface {
		Insert(ctx context.Context, data *BaseData) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*BaseData, error)
		Update(ctx context.Context, data *BaseData) error
		Delete(ctx context.Context, id uint64) error
		FindByType(ctx context.Context, datatype string) (*[]BaseData, error)
		FindList(ctx context.Context, condition string) (*[]BaseData, error)
		Count(ctx context.Context, condition string) (int, error)
		FindByTypeName(ctx context.Context, datatype string, name string) (int, error)
	}

	defaultBaseDataModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BaseData struct {
		Id        uint64    `db:"id"`
		DataId    uint64    `db:"data_id"` // 序列号
		DataType  string    `db:"data_type"`
		Name      string    `db:"name"`    // 名称
		Comment   string    `db:"comment"` // 备注
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newBaseDataModel(conn sqlx.SqlConn) *defaultBaseDataModel {
	return &defaultBaseDataModel{
		conn:  conn,
		table: "`base_data`",
	}
}

func (m *defaultBaseDataModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBaseDataModel) FindOne(ctx context.Context, id uint64) (*BaseData, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", baseDataRows, m.table)
	var resp BaseData
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBaseDataModel) Insert(ctx context.Context, data *BaseData) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, baseDataRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DataId, data.DataType, data.Name, data.Comment)
	return ret, err
}

func (m *defaultBaseDataModel) Update(ctx context.Context, data *BaseData) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, baseDataRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DataId, data.DataType, data.Name, data.Comment, data.Id)
	return err
}

func (m *defaultBaseDataModel) tableName() string {
	return m.table
}
