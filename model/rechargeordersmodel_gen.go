// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rechargeOrdersFieldNames          = builder.RawFieldNames(&RechargeOrders{})
	rechargeOrdersRows                = strings.Join(rechargeOrdersFieldNames, ",")
	rechargeOrdersRowsExpectAutoSet   = strings.Join(stringx.Remove(rechargeOrdersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	rechargeOrdersRowsWithPlaceHolder = strings.Join(stringx.Remove(rechargeOrdersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	rechargeOrdersModel interface {
		Insert(ctx context.Context, data *RechargeOrders) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RechargeOrders, error)
		Update(ctx context.Context, data *RechargeOrders) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRechargeOrdersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RechargeOrders struct {
		Id            int64  `db:"id"`             // ID
		UserId        uint64 `db:"user_id"`        // 用户ID
		OrgId         uint64 `db:"org_id"`         // 组织ID
		OrderNo       string `db:"order_no"`       // 订单编号
		OrderTitle    string `db:"order_title"`    // 订单标题
		PayMethod     uint64  `db:"pay_method"`     // 支付方式（1：微信，2:支付宝，100:其他）
		Remark        string `db:"remark"`         // 订单备注
		Status        uint64 `db:"status"`         // 订单状态（1:pending；2-completed；3:rejected；4:failed）
		Amount        int64  `db:"amount"`         // 支付金额
		CreatedAt     uint64  `db:"created_at"`     // 创建时间
		PaidAt        uint64  `db:"paid_at"`        // 支付时间
		PayCodeUrl    string `db:"pay_code_url"`   // 付款链接
		TransactionId string `db:"transaction_id"` // 交易流水号
	}
)

func newRechargeOrdersModel(conn sqlx.SqlConn) *defaultRechargeOrdersModel {
	return &defaultRechargeOrdersModel{
		conn:  conn,
		table: "`recharge_orders`",
	}
}

func (m *defaultRechargeOrdersModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRechargeOrdersModel) FindOne(ctx context.Context, id int64) (*RechargeOrders, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", rechargeOrdersRows, m.table)
	var resp RechargeOrders
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRechargeOrdersModel) Insert(ctx context.Context, data *RechargeOrders) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, rechargeOrdersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.OrgId, data.OrderNo, data.OrderTitle, data.PayMethod, data.Remark, data.Status, data.Amount, data.PaidAt, data.PayCodeUrl, data.TransactionId)
	return ret, err
}

func (m *defaultRechargeOrdersModel) Update(ctx context.Context, data *RechargeOrders) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, rechargeOrdersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.OrgId, data.OrderNo, data.OrderTitle, data.PayMethod, data.Remark, data.Status, data.Amount, data.PaidAt, data.PayCodeUrl, data.TransactionId, data.Id)
	return err
}

func (m *defaultRechargeOrdersModel) tableName() string {
	return m.table
}
