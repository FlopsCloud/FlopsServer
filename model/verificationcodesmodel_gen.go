// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	verificationCodesFieldNames          = builder.RawFieldNames(&VerificationCodes{})
	verificationCodesRows                = strings.Join(verificationCodesFieldNames, ",")
	verificationCodesRowsExpectAutoSet   = strings.Join(stringx.Remove(verificationCodesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	verificationCodesRowsWithPlaceHolder = strings.Join(stringx.Remove(verificationCodesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	verificationCodesModel interface {
		Insert(ctx context.Context, data *VerificationCodes) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*VerificationCodes, error)
		Update(ctx context.Context, data *VerificationCodes) error
		Delete(ctx context.Context, id int64) error
	}

	defaultVerificationCodesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	VerificationCodes struct {
		Id             int64     `db:"id"`
		TargetType     string    `db:"target_type"`
		TargetValue    string    `db:"target_value"`
		Code           string    `db:"code"`
		Ip             string    `db:"ip"`
		ExpirationTime time.Time `db:"expiration_time"`
		CreatedAt      time.Time `db:"created_at"`
	}
)

func newVerificationCodesModel(conn sqlx.SqlConn) *defaultVerificationCodesModel {
	return &defaultVerificationCodesModel{
		conn:  conn,
		table: "`verification_codes`",
	}
}

func (m *defaultVerificationCodesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultVerificationCodesModel) FindOne(ctx context.Context, id int64) (*VerificationCodes, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", verificationCodesRows, m.table)
	var resp VerificationCodes
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVerificationCodesModel) Insert(ctx context.Context, data *VerificationCodes) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, verificationCodesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TargetType, data.TargetValue, data.Code, data.Ip, data.ExpirationTime)
	return ret, err
}

func (m *defaultVerificationCodesModel) Update(ctx context.Context, data *VerificationCodes) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, verificationCodesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.TargetType, data.TargetValue, data.Code, data.Ip, data.ExpirationTime, data.Id)
	return err
}

func (m *defaultVerificationCodesModel) tableName() string {
	return m.table
}
