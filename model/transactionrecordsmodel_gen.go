// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	transactionRecordsFieldNames          = builder.RawFieldNames(&TransactionRecords{})
	transactionRecordsRows                = strings.Join(transactionRecordsFieldNames, ",")
	transactionRecordsRowsExpectAutoSet   = strings.Join(stringx.Remove(transactionRecordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	transactionRecordsRowsWithPlaceHolder = strings.Join(stringx.Remove(transactionRecordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	transactionRecordsModel interface {
		Insert(ctx context.Context, data *TransactionRecords) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TransactionRecords, error)
		Update(ctx context.Context, data *TransactionRecords) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTransactionRecordsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TransactionRecords struct {
		Id           int64  `db:"id"`            // ID
		UserId       uint64  `db:"user_id"`       // 用户ID
		OrgId        uint64  `db:"org_id"`        // 组织ID
		CreatedAt    uint64  `db:"created_at"`    // 创建时间
		TransType    uint64  `db:"trans_type"`    // 交易类型（1-充值;2-消费;3-其他）
		PayType      string `db:"pay_type"`      // 支付方式
		CurrencyCode string `db:"currency_code"` // 交易币种
		Detail       string `db:"detail"`        // 详情描述
		OrderNo      string `db:"order_no"`      // 订单编号
		Username     string `db:"username"`      // 用户名称
		Amount       int64  `db:"amount"`        // 金额
		Balance      int64  `db:"balance"`       // 余额
	}
)

func newTransactionRecordsModel(conn sqlx.SqlConn) *defaultTransactionRecordsModel {
	return &defaultTransactionRecordsModel{
		conn:  conn,
		table: "`transaction_records`",
	}
}

func (m *defaultTransactionRecordsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTransactionRecordsModel) FindOne(ctx context.Context, id int64) (*TransactionRecords, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", transactionRecordsRows, m.table)
	var resp TransactionRecords
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTransactionRecordsModel) Insert(ctx context.Context, data *TransactionRecords) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, transactionRecordsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.OrgId, data.TransType, data.PayType, data.CurrencyCode, data.Detail, data.OrderNo, data.Username, data.Amount, data.Balance)
	return ret, err
}

func (m *defaultTransactionRecordsModel) Update(ctx context.Context, data *TransactionRecords) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, transactionRecordsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.OrgId, data.TransType, data.PayType, data.CurrencyCode, data.Detail, data.OrderNo, data.Username, data.Amount, data.Balance, data.Id)
	return err
}

func (m *defaultTransactionRecordsModel) tableName() string {
	return m.table
}
