// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	resourcesFieldNames          = builder.RawFieldNames(&Resources{})
	resourcesRows                = strings.Join(resourcesFieldNames, ",")
	resourcesRowsExpectAutoSet   = strings.Join(stringx.Remove(resourcesFieldNames, "`resource_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	resourcesRowsWithPlaceHolder = strings.Join(stringx.Remove(resourcesFieldNames, "`resource_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	resourcesModel interface {
		Insert(ctx context.Context, data *Resources) (sql.Result, error)
		FindOne(ctx context.Context, resourceId uint64) (*Resources, error)
		Update(ctx context.Context, data *Resources) error
		Delete(ctx context.Context, resourceId uint64) error
	}

	defaultResourcesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Resources struct {
		ResourceId    uint64       `db:"resource_id"`   // 使用资源类型ID
		ResourceType  string       `db:"resource_type"` // 使用资源类型CPU,MEM,GPU,SSD,NET
		UnitMinPrice  int64        `db:"unit_min_price"`
		UnitHourPrice int64        `db:"unit_hour_price"`
		UnitDayPrice  int64        `db:"unit_day_price"`
		IsDeleted     int64        `db:"is_deleted"` // 是否删除
		DeletedAt     sql.NullTime `db:"deleted_at"` // 删除时间
		CreatedAt     time.Time    `db:"created_at"`
		CreatedBy     uint64       `db:"created_by"` // 创建人ID
	}
)

func newResourcesModel(conn sqlx.SqlConn) *defaultResourcesModel {
	return &defaultResourcesModel{
		conn:  conn,
		table: "`resources`",
	}
}

func (m *defaultResourcesModel) Delete(ctx context.Context, resourceId uint64) error {
	query := fmt.Sprintf("delete from %s where `resource_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, resourceId)
	return err
}

func (m *defaultResourcesModel) FindOne(ctx context.Context, resourceId uint64) (*Resources, error) {
	query := fmt.Sprintf("select %s from %s where `resource_id` = ? limit 1", resourcesRows, m.table)
	var resp Resources
	err := m.conn.QueryRowCtx(ctx, &resp, query, resourceId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultResourcesModel) Insert(ctx context.Context, data *Resources) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, resourcesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query,  data.ResourceType, data.UnitMinPrice, data.UnitHourPrice, data.UnitDayPrice, data.IsDeleted, data.DeletedAt, data.CreatedBy)
	return ret, err
}

func (m *defaultResourcesModel) Update(ctx context.Context, data *Resources) error {
	query := fmt.Sprintf("update %s set %s where `resource_id` = ?", m.table, resourcesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query,   data.ResourceType, data.UnitMinPrice, data.UnitHourPrice, data.UnitDayPrice, data.IsDeleted, data.DeletedAt, data.CreatedBy, data.ResourceId)
	return err
}

func (m *defaultResourcesModel) tableName() string {
	return m.table
}
