// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	instancesFieldNames          = builder.RawFieldNames(&Instances{})
	instancesRows                = strings.Join(instancesFieldNames, ",")
	instancesRowsExpectAutoSet   = strings.Join(stringx.Remove(instancesFieldNames, "`instance_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	instancesRowsWithPlaceHolder = strings.Join(stringx.Remove(instancesFieldNames, "`instance_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	instancesModel interface {
		Insert(ctx context.Context, data *Instances) (sql.Result, error)
		FindOne(ctx context.Context, instanceId uint64) (*Instances, error)
		Update(ctx context.Context, data *Instances) error
		Delete(ctx context.Context, instanceId uint64) error
	}

	defaultInstancesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Instances struct {
		InstanceId    uint64         `db:"instance_id"`
		Name          string		 `db:"name"`           // 服务器名称
		State         string		 `db:"state"`          // 状态
		UserId        uint64         `db:"user_id"`        // 用户id
		ServerId      uint64         `db:"server_id"`      // 服务器id
		ImageId       uint64         `db:"image_id"`       // 镜像
		Ip            uint64         `db:"ip"`             // 公网ip
		Port          string         `db:"port"`           // 服务端口列表
		ContainerPort string         `db:"container_port"` // 容器端口列表
		GpuCores      uint64         `db:"gpu_cores"`      // GPU核数
		Memory        uint64         `db:"memory"`         // 内存(GB)
		DiskPath      string         `db:"disk_path"`      // 磁盘路径
		Cost          uint64         `db:"cost"`           // 费用
		MountPath     string         `db:"mount_path"`     // 挂载目录
		CreatedAt     time.Time      `db:"created_at"`
		UpdatedAt     time.Time      `db:"updated_at"`
		OrgId         int64          `db:"org_id"` // 组织ID
	}
)

func newInstancesModel(conn sqlx.SqlConn) *defaultInstancesModel {
	return &defaultInstancesModel{
		conn:  conn,
		table: "`instances`",
	}
}

func (m *defaultInstancesModel) Delete(ctx context.Context, instanceId uint64) error {
	query := fmt.Sprintf("delete from %s where `instance_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, instanceId)
	return err
}

func (m *defaultInstancesModel) FindOne(ctx context.Context, instanceId uint64) (*Instances, error) {
	query := fmt.Sprintf("select %s from %s where `instance_id` = ? limit 1", instancesRows, m.table)
	var resp Instances
	err := m.conn.QueryRowCtx(ctx, &resp, query, instanceId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInstancesModel) Insert(ctx context.Context, data *Instances) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, instancesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.State, data.UserId, data.ServerId, data.ImageId, data.Ip, data.Port, data.ContainerPort, data.GpuCores, data.Memory, data.DiskPath, data.Cost, data.MountPath, data.OrgId)
	return ret, err
}

func (m *defaultInstancesModel) Update(ctx context.Context, data *Instances) error {
	query := fmt.Sprintf("update %s set %s where `instance_id` = ?", m.table, instancesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.State, data.UserId, data.ServerId, data.ImageId, data.Ip, data.Port, data.ContainerPort, data.GpuCores, data.Memory, data.DiskPath, data.Cost, data.MountPath, data.OrgId, data.InstanceId)
	return err
}

func (m *defaultInstancesModel) tableName() string {
	return m.table
}
