// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	imagesFieldNames          = builder.RawFieldNames(&Images{})
	imagesRows                = strings.Join(imagesFieldNames, ",")
	imagesRowsExpectAutoSet   = strings.Join(stringx.Remove(imagesFieldNames, "`image_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	imagesRowsWithPlaceHolder = strings.Join(stringx.Remove(imagesFieldNames, "`image_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	imagesModel interface {
		Insert(ctx context.Context, data *Images) (sql.Result, error)
		FindOne(ctx context.Context, imageId uint64) (*Images, error)
		Update(ctx context.Context, data *Images) error
		Delete(ctx context.Context, imageId uint64) error
	}

	defaultImagesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Images struct {
		ImageId   uint64    `db:"image_id"`
		ImageName string    `db:"image_name"` // Docker镜像名称
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newImagesModel(conn sqlx.SqlConn) *defaultImagesModel {
	return &defaultImagesModel{
		conn:  conn,
		table: "`images`",
	}
}

func (m *defaultImagesModel) Delete(ctx context.Context, imageId uint64) error {
	query := fmt.Sprintf("delete from %s where `image_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, imageId)
	return err
}

func (m *defaultImagesModel) FindOne(ctx context.Context, imageId uint64) (*Images, error) {
	query := fmt.Sprintf("select %s from %s where `image_id` = ? limit 1", imagesRows, m.table)
	var resp Images
	err := m.conn.QueryRowCtx(ctx, &resp, query, imageId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultImagesModel) Insert(ctx context.Context, data *Images) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, imagesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ImageName)
	return ret, err
}

func (m *defaultImagesModel) Update(ctx context.Context, data *Images) error {
	query := fmt.Sprintf("update %s set %s where `image_id` = ?", m.table, imagesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ImageName, data.ImageId)
	return err
}

func (m *defaultImagesModel) tableName() string {
	return m.table
}
