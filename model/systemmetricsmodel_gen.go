// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	systemMetricsFieldNames          = builder.RawFieldNames(&SystemMetrics{})
	systemMetricsRows                = strings.Join(systemMetricsFieldNames, ",")
	systemMetricsRowsExpectAutoSet   = strings.Join(stringx.Remove(systemMetricsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	systemMetricsRowsWithPlaceHolder = strings.Join(stringx.Remove(systemMetricsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	systemMetricsModel interface {
		Insert(ctx context.Context, data *SystemMetrics) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*SystemMetrics, error)
		Update(ctx context.Context, data *SystemMetrics) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultSystemMetricsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SystemMetrics struct {
		Id          uint64    `db:"id"`
		InstanceId  uint64    `db:"instance_id"`  // GPU资源ID
		CpuUsage    float64   `db:"cpu_usage"`    // CPU使用率(%)
		MemoryUsage float64   `db:"memory_usage"` // 内存使用率(%)
		GpuUsage    float64   `db:"gpu_usage"`    // GPU使用率(%)
		NetworkIo   float64   `db:"network_io"`   // 网络IO(MB/s)
		Timestamp   int64     `db:"timestamp"`    // 记录时间戳
		CreatedAt   time.Time `db:"created_at"`
	}
)

func newSystemMetricsModel(conn sqlx.SqlConn) *defaultSystemMetricsModel {
	return &defaultSystemMetricsModel{
		conn:  conn,
		table: "`system_metrics`",
	}
}

func (m *defaultSystemMetricsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSystemMetricsModel) FindOne(ctx context.Context, id uint64) (*SystemMetrics, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemMetricsRows, m.table)
	var resp SystemMetrics
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemMetricsModel) Insert(ctx context.Context, data *SystemMetrics) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, systemMetricsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.InstanceId, data.CpuUsage, data.MemoryUsage, data.GpuUsage, data.NetworkIo, data.Timestamp)
	return ret, err
}

func (m *defaultSystemMetricsModel) Update(ctx context.Context, data *SystemMetrics) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, systemMetricsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.InstanceId, data.CpuUsage, data.MemoryUsage, data.GpuUsage, data.NetworkIo, data.Timestamp, data.Id)
	return err
}

func (m *defaultSystemMetricsModel) tableName() string {
	return m.table
}
