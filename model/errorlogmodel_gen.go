// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	errorLogFieldNames          = builder.RawFieldNames(&ErrorLog{})
	errorLogRows                = strings.Join(errorLogFieldNames, ",")
	errorLogRowsExpectAutoSet   = strings.Join(stringx.Remove(errorLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	errorLogRowsWithPlaceHolder = strings.Join(stringx.Remove(errorLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	errorLogModel interface {
		Insert(ctx context.Context, data *ErrorLog) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ErrorLog, error)
		Update(ctx context.Context, data *ErrorLog) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultErrorLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ErrorLog struct {
		Id        uint64    `db:"id"`
		Tag       string    `db:"tag"`
		Message   string    `db:"message"` // 问题
		CreatedAt time.Time `db:"created_at"`
	}
)

func newErrorLogModel(conn sqlx.SqlConn) *defaultErrorLogModel {
	return &defaultErrorLogModel{
		conn:  conn,
		table: "`error_log`",
	}
}

func (m *defaultErrorLogModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultErrorLogModel) FindOne(ctx context.Context, id uint64) (*ErrorLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", errorLogRows, m.table)
	var resp ErrorLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultErrorLogModel) Insert(ctx context.Context, data *ErrorLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, errorLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Tag, data.Message)
	return ret, err
}

func (m *defaultErrorLogModel) Update(ctx context.Context, data *ErrorLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, errorLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Tag, data.Message, data.Id)
	return err
}

func (m *defaultErrorLogModel) tableName() string {
	return m.table
}
