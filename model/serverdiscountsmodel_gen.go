// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	serverDiscountsFieldNames          = builder.RawFieldNames(&ServerDiscounts{})
	serverDiscountsRows                = strings.Join(serverDiscountsFieldNames, ",")
	serverDiscountsRowsExpectAutoSet   = strings.Join(stringx.Remove(serverDiscountsFieldNames, "`srv_discount_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	serverDiscountsRowsWithPlaceHolder = strings.Join(stringx.Remove(serverDiscountsFieldNames, "`srv_discount_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	serverDiscountsModel interface {
		Insert(ctx context.Context, data *ServerDiscounts) (sql.Result, error)
		FindOne(ctx context.Context, srvDiscountId uint64) (*ServerDiscounts, error)
		Update(ctx context.Context, data *ServerDiscounts) error
		Delete(ctx context.Context, srvDiscountId uint64) error
	}

	defaultServerDiscountsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ServerDiscounts struct {
		SrvDiscountId uint64         `db:"srv_discount_id"` // 折扣ID
		OrgId         uint64         `db:"org_id"`          // 组织ID
		ServerId      uint64         `db:"server_id"`       // 使用资源类型ID
		Memo          sql.NullString `db:"memo"`            // 备注
		Startdate     time.Time      `db:"startdate"`       // 折扣开始日期
		Enddate       time.Time      `db:"enddate"`         // 折扣结束日期
		Discount      int64          `db:"discount"`        // 100 表示 10 折
		IsDeleted     int64          `db:"is_deleted"`      // 是否删除
		DeletedAt     sql.NullTime   `db:"deleted_at"`      // 删除时间
		CreatedAt     time.Time      `db:"created_at"`
		CreatedBy     uint64         `db:"created_by"` // 创建人ID
	}
)

func newServerDiscountsModel(conn sqlx.SqlConn) *defaultServerDiscountsModel {
	return &defaultServerDiscountsModel{
		conn:  conn,
		table: "`server_discounts`",
	}
}

func (m *defaultServerDiscountsModel) Delete(ctx context.Context, srvDiscountId uint64) error {
	query := fmt.Sprintf("delete from %s where `srv_discount_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, srvDiscountId)
	return err
}

func (m *defaultServerDiscountsModel) FindOne(ctx context.Context, srvDiscountId uint64) (*ServerDiscounts, error) {
	query := fmt.Sprintf("select %s from %s where `srv_discount_id` = ? limit 1", serverDiscountsRows, m.table)
	var resp ServerDiscounts
	err := m.conn.QueryRowCtx(ctx, &resp, query, srvDiscountId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultServerDiscountsModel) Insert(ctx context.Context, data *ServerDiscounts) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, serverDiscountsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrgId, data.ServerId, data.Memo, data.Startdate, data.Enddate, data.Discount, data.IsDeleted, data.DeletedAt, data.CreatedBy)
	return ret, err
}

func (m *defaultServerDiscountsModel) Update(ctx context.Context, data *ServerDiscounts) error {
	query := fmt.Sprintf("update %s set %s where `srv_discount_id` = ?", m.table, serverDiscountsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrgId, data.ServerId, data.Memo, data.Startdate, data.Enddate, data.Discount, data.IsDeleted, data.DeletedAt, data.CreatedBy, data.SrvDiscountId)
	return err
}

func (m *defaultServerDiscountsModel) tableName() string {
	return m.table
}
