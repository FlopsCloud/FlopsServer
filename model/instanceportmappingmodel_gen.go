// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	instancePortMappingFieldNames          = builder.RawFieldNames(&InstancePortMapping{})
	instancePortMappingRows                = strings.Join(instancePortMappingFieldNames, ",")
	instancePortMappingRowsExpectAutoSet   = strings.Join(stringx.Remove(instancePortMappingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	instancePortMappingRowsWithPlaceHolder = strings.Join(stringx.Remove(instancePortMappingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	instancePortMappingModel interface {
		Insert(ctx context.Context, data *InstancePortMapping) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*InstancePortMapping, error)
		Update(ctx context.Context, data *InstancePortMapping) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultInstancePortMappingModel struct {
		conn  sqlx.SqlConn
		table string
	}

	InstancePortMapping struct {
		Id            uint64    `db:"id"`
		ServerId      uint64    `db:"server_id"`      // 服务器id
		InstanceId    uint64    `db:"instance_id"`    // 实例id
		Port          uint64    `db:"port"`           // 服务端口
		ContainerPort uint64    `db:"container_port"` // 容器端口
		CreateTime    time.Time `db:"create_time"`
		UpdateTime    time.Time `db:"update_time"`
	}
)

func newInstancePortMappingModel(conn sqlx.SqlConn) *defaultInstancePortMappingModel {
	return &defaultInstancePortMappingModel{
		conn:  conn,
		table: "`instance_port_mapping`",
	}
}

func (m *defaultInstancePortMappingModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultInstancePortMappingModel) FindOne(ctx context.Context, id uint64) (*InstancePortMapping, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", instancePortMappingRows, m.table)
	var resp InstancePortMapping
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInstancePortMappingModel) Insert(ctx context.Context, data *InstancePortMapping) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, instancePortMappingRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ServerId, data.InstanceId, data.Port, data.ContainerPort)
	return ret, err
}

func (m *defaultInstancePortMappingModel) Update(ctx context.Context, data *InstancePortMapping) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, instancePortMappingRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ServerId, data.InstanceId, data.Port, data.ContainerPort, data.Id)
	return err
}

func (m *defaultInstancePortMappingModel) tableName() string {
	return m.table
}
