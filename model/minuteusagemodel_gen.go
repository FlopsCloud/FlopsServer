// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	minuteUsageFieldNames          = builder.RawFieldNames(&MinuteUsage{})
	minuteUsageRows                = strings.Join(minuteUsageFieldNames, ",")
	minuteUsageRowsExpectAutoSet   = strings.Join(stringx.Remove(minuteUsageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	minuteUsageRowsWithPlaceHolder = strings.Join(stringx.Remove(minuteUsageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	minuteUsageModel interface {
		Insert(ctx context.Context, data *MinuteUsage) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*MinuteUsage, error)
		Update(ctx context.Context, data *MinuteUsage) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultMinuteUsageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	MinuteUsage struct {
		Id            uint64    `db:"id"`
		UsageId       uint64    `db:"usage_id"`       // 日使用记录ID
		OrgId         uint64    `db:"org_id"`         // 组织ID
		UserId        uint64    `db:"user_id"`        // 用户ID
		ResourceId    uint64    `db:"resource_id"`    // 使用资源类型ID
		UsageDatetime time.Time `db:"usage_datetime"` // 使用日期
		Fee           int64     `db:"fee"`            // 费用
		Discount      int64     `db:"discount"`       // 100 表示 10 折
	}
)

func newMinuteUsageModel(conn sqlx.SqlConn) *defaultMinuteUsageModel {
	return &defaultMinuteUsageModel{
		conn:  conn,
		table: "`minute_usage`",
	}
}

func (m *defaultMinuteUsageModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMinuteUsageModel) FindOne(ctx context.Context, id uint64) (*MinuteUsage, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", minuteUsageRows, m.table)
	var resp MinuteUsage
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMinuteUsageModel) Insert(ctx context.Context, data *MinuteUsage) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, minuteUsageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UsageId, data.OrgId, data.UserId, data.ResourceId, data.UsageDatetime, data.Fee, data.Discount)
	return ret, err
}

func (m *defaultMinuteUsageModel) Update(ctx context.Context, data *MinuteUsage) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, minuteUsageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UsageId, data.OrgId, data.UserId, data.ResourceId, data.UsageDatetime, data.Fee, data.Discount, data.Id)
	return err
}

func (m *defaultMinuteUsageModel) tableName() string {
	return m.table
}
