// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	discountsFieldNames          = builder.RawFieldNames(&Discounts{})
	discountsRows                = strings.Join(discountsFieldNames, ",")
	discountsRowsExpectAutoSet   = strings.Join(stringx.Remove(discountsFieldNames, "`discount_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	discountsRowsWithPlaceHolder = strings.Join(stringx.Remove(discountsFieldNames, "`discount_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	discountsModel interface {
		Insert(ctx context.Context, data *Discounts) (sql.Result, error)
		FindOne(ctx context.Context, discountId uint64) (*Discounts, error)
		Update(ctx context.Context, data *Discounts) error
		Delete(ctx context.Context, discountId uint64) error
	}

	defaultDiscountsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Discounts struct {
		DiscountId uint64         `db:"discount_id"` // 折扣ID
		OrgId      uint64         `db:"org_id"`      // 组织ID
		ResourceId uint64         `db:"resource_id"` // 使用资源类型ID
		Memo       sql.NullString `db:"memo"`        // 备注
		Startdate  time.Time      `db:"startdate"`   // 折扣开始日期
		Enddate    time.Time      `db:"enddate"`     // 折扣结束日期
		Discount   int64          `db:"discount"`    // 100 表示 10 折
		IsDeleted  int64          `db:"is_deleted"`  // 是否删除
		DeletedAt  sql.NullTime   `db:"deleted_at"`  // 删除时间
		CreatedAt  time.Time      `db:"created_at"`
		CreatedBy  uint64         `db:"created_by"` // 创建人ID
	}
)

func newDiscountsModel(conn sqlx.SqlConn) *defaultDiscountsModel {
	return &defaultDiscountsModel{
		conn:  conn,
		table: "`discounts`",
	}
}

func (m *defaultDiscountsModel) Delete(ctx context.Context, discountId uint64) error {
	query := fmt.Sprintf("delete from %s where `discount_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, discountId)
	return err
}

func (m *defaultDiscountsModel) FindOne(ctx context.Context, discountId uint64) (*Discounts, error) {
	query := fmt.Sprintf("select %s from %s where `discount_id` = ? limit 1", discountsRows, m.table)
	var resp Discounts
	err := m.conn.QueryRowCtx(ctx, &resp, query, discountId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDiscountsModel) Insert(ctx context.Context, data *Discounts) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, discountsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrgId, data.ResourceId, data.Memo, data.Startdate, data.Enddate, data.Discount, data.IsDeleted, data.DeletedAt, data.CreatedBy)
	return ret, err
}

func (m *defaultDiscountsModel) Update(ctx context.Context, data *Discounts) error {
	query := fmt.Sprintf("update %s set %s where `discount_id` = ?", m.table, discountsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrgId, data.ResourceId, data.Memo, data.Startdate, data.Enddate, data.Discount, data.IsDeleted, data.DeletedAt, data.CreatedBy, data.DiscountId)
	return err
}

func (m *defaultDiscountsModel) tableName() string {
	return m.table
}
