// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	supportTicketsFieldNames          = builder.RawFieldNames(&SupportTickets{})
	supportTicketsRows                = strings.Join(supportTicketsFieldNames, ",")
	supportTicketsRowsExpectAutoSet   = strings.Join(stringx.Remove(supportTicketsFieldNames, "`ticket_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	supportTicketsRowsWithPlaceHolder = strings.Join(stringx.Remove(supportTicketsFieldNames, "`ticket_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	supportTicketsModel interface {
		Insert(ctx context.Context, data *SupportTickets) (sql.Result, error)
		FindOne(ctx context.Context, ticketId uint64) (*SupportTickets, error)
		Update(ctx context.Context, data *SupportTickets) error
		Delete(ctx context.Context, ticketId uint64) error
	}

	defaultSupportTicketsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SupportTickets struct {
		TicketId    uint64    `db:"ticket_id"`
		UserId      uint64    `db:"user_id"`     // 用户ID
		Title       string    `db:"title"`       // 工单标题
		Description string    `db:"description"` // 工单描述
		Status      string    `db:"status"`      // 状态:open/in-progress/resolved/closed
		Priority    string    `db:"priority"`    // 优先级:low/medium/high/urgent
		CreatedAt   time.Time `db:"created_at"`
		UpdatedAt   time.Time `db:"updated_at"`
		Images      string    `db:"images"`
	}
)

func newSupportTicketsModel(conn sqlx.SqlConn) *defaultSupportTicketsModel {
	return &defaultSupportTicketsModel{
		conn:  conn,
		table: "`support_tickets`",
	}
}

func (m *defaultSupportTicketsModel) Delete(ctx context.Context, ticketId uint64) error {
	query := fmt.Sprintf("delete from %s where `ticket_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, ticketId)
	return err
}

func (m *defaultSupportTicketsModel) FindOne(ctx context.Context, ticketId uint64) (*SupportTickets, error) {
	query := fmt.Sprintf("select %s from %s where `ticket_id` = ? limit 1", supportTicketsRows, m.table)
	var resp SupportTickets
	err := m.conn.QueryRowCtx(ctx, &resp, query, ticketId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSupportTicketsModel) Insert(ctx context.Context, data *SupportTickets) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, supportTicketsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Title, data.Description, data.Status, data.Priority, data.Images)
	return ret, err
}

func (m *defaultSupportTicketsModel) Update(ctx context.Context, data *SupportTickets) error {
	query := fmt.Sprintf("update %s set %s where `ticket_id` = ?", m.table, supportTicketsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Title, data.Description, data.Status, data.Priority, data.Images, data.TicketId)
	return err
}

func (m *defaultSupportTicketsModel) tableName() string {
	return m.table
}
