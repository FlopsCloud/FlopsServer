// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	systemNotificationsFieldNames          = builder.RawFieldNames(&SystemNotifications{})
	systemNotificationsRows                = strings.Join(systemNotificationsFieldNames, ",")
	systemNotificationsRowsExpectAutoSet   = strings.Join(stringx.Remove(systemNotificationsFieldNames, "`notification_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	systemNotificationsRowsWithPlaceHolder = strings.Join(stringx.Remove(systemNotificationsFieldNames, "`notification_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	systemNotificationsModel interface {
		Insert(ctx context.Context, data *SystemNotifications) (sql.Result, error)
		FindOne(ctx context.Context, notificationId uint64) (*SystemNotifications, error)
		Update(ctx context.Context, data *SystemNotifications) error
		Delete(ctx context.Context, notificationId uint64) error
	}

	defaultSystemNotificationsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SystemNotifications struct {
		NotificationId uint64        `db:"notification_id"`
		UserId         sql.NullInt64 `db:"user_id"` // 用户ID(NULL表示全局通知)
		OrgId          sql.NullInt64 `db:"org_id"`  // 组织ID(NULL表示不限组织)
		Title          string        `db:"title"`   // 通知标题
		Content        string        `db:"content"` // 通知内容
		Type           string        `db:"type"`    // 类型:system/maintenance/billing/security
		CreatedAt      time.Time     `db:"created_at"`
	}
)

func newSystemNotificationsModel(conn sqlx.SqlConn) *defaultSystemNotificationsModel {
	return &defaultSystemNotificationsModel{
		conn:  conn,
		table: "`system_notifications`",
	}
}

func (m *defaultSystemNotificationsModel) Delete(ctx context.Context, notificationId uint64) error {
	query := fmt.Sprintf("delete from %s where `notification_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, notificationId)
	return err
}

func (m *defaultSystemNotificationsModel) FindOne(ctx context.Context, notificationId uint64) (*SystemNotifications, error) {
	query := fmt.Sprintf("select %s from %s where `notification_id` = ? limit 1", systemNotificationsRows, m.table)
	var resp SystemNotifications
	err := m.conn.QueryRowCtx(ctx, &resp, query, notificationId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemNotificationsModel) Insert(ctx context.Context, data *SystemNotifications) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, systemNotificationsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.OrgId, data.Title, data.Content, data.Type)
	return ret, err
}

func (m *defaultSystemNotificationsModel) Update(ctx context.Context, data *SystemNotifications) error {
	query := fmt.Sprintf("update %s set %s where `notification_id` = ?", m.table, systemNotificationsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.OrgId, data.Title, data.Content, data.Type, data.NotificationId)
	return err
}

func (m *defaultSystemNotificationsModel) tableName() string {
	return m.table
}
