// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderRecordsFieldNames          = builder.RawFieldNames(&OrderRecords{})
	orderRecordsRows                = strings.Join(orderRecordsFieldNames, ",")
	orderRecordsRowsExpectAutoSet   = strings.Join(stringx.Remove(orderRecordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderRecordsRowsWithPlaceHolder = strings.Join(stringx.Remove(orderRecordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	orderRecordsModel interface {
		Insert(ctx context.Context, data *OrderRecords) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*OrderRecords, error)
		Update(ctx context.Context, data *OrderRecords) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultOrderRecordsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OrderRecords struct {
		Id            uint64 `db:"id"`             // ID
		OrderNo       string `db:"order_no"`       // 订单号
		InstanceId    uint64 `db:"instance_id"`    // 实例ID
		RunningTime   uint64 `db:"running_time"`   // 运行时长
		CreatedAt     uint64 `db:"created_at"`     // 创建时间
		BillingMethod uint64 `db:"billing_method"` // 计费方式（1-按时、2-按天、3-按周、4-按月、0-按量）
		OrderAmount   uint64 `db:"order_amount"`   // 订单金额
		Discount      uint64 `db:"discount"`       // 补贴减免
		ActualAmount  uint64 `db:"actual_amount"`  // 实收金额
		UserId        uint64 `db:"user_id"`        // 用户ID
		OrderType     uint64 `db:"order_type"`     // 订单类型（1-收入、2-消费）
	}
)

func newOrderRecordsModel(conn sqlx.SqlConn) *defaultOrderRecordsModel {
	return &defaultOrderRecordsModel{
		conn:  conn,
		table: "`order_records`",
	}
}

func (m *defaultOrderRecordsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOrderRecordsModel) FindOne(ctx context.Context, id uint64) (*OrderRecords, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderRecordsRows, m.table)
	var resp OrderRecords
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderRecordsModel) Insert(ctx context.Context, data *OrderRecords) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderRecordsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrderNo, data.InstanceId, data.RunningTime, data.BillingMethod, data.OrderAmount, data.Discount, data.ActualAmount, data.UserId, data.OrderType)
	return ret, err
}

func (m *defaultOrderRecordsModel) Update(ctx context.Context, data *OrderRecords) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderRecordsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrderNo, data.InstanceId, data.RunningTime, data.BillingMethod, data.OrderAmount, data.Discount, data.ActualAmount, data.UserId, data.OrderType, data.Id)
	return err
}

func (m *defaultOrderRecordsModel) tableName() string {
	return m.table
}
