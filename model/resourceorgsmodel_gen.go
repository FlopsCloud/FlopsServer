// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	resourceOrgsFieldNames          = builder.RawFieldNames(&ResourceOrgs{})
	resourceOrgsRows                = strings.Join(resourceOrgsFieldNames, ",")
	resourceOrgsRowsExpectAutoSet   = strings.Join(stringx.Remove(resourceOrgsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	resourceOrgsRowsWithPlaceHolder = strings.Join(stringx.Remove(resourceOrgsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	resourceOrgsModel interface {
		Insert(ctx context.Context, data *ResourceOrgs) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ResourceOrgs, error)
		Update(ctx context.Context, data *ResourceOrgs) error
		Delete(ctx context.Context, id int64) error
	 
	}

	defaultResourceOrgsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ResourceOrgs struct {
		Id         int64     `db:"id"`
		ResourceId uint64    `db:"resource_id"`
		OrgId      uint64    `db:"org_id"`
		CreatedAt  time.Time `db:"created_at"`
		UpdatedAt  time.Time `db:"updated_at"`
	}
)

func newResourceOrgsModel(conn sqlx.SqlConn) *defaultResourceOrgsModel {
	return &defaultResourceOrgsModel{
		conn:  conn,
		table: "`resource_orgs`",
	}
}

func (m *defaultResourceOrgsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}


func (m *defaultResourceOrgsModel) FindOne(ctx context.Context, id int64) (*ResourceOrgs, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", resourceOrgsRows, m.table)
	var resp ResourceOrgs
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultResourceOrgsModel) Insert(ctx context.Context, data *ResourceOrgs) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, resourceOrgsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ResourceId, data.OrgId)
	return ret, err
}

func (m *defaultResourceOrgsModel) Update(ctx context.Context, data *ResourceOrgs) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, resourceOrgsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ResourceId, data.OrgId, data.Id)
	return err
}

func (m *defaultResourceOrgsModel) tableName() string {
	return m.table
}
