// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	organizationsFieldNames          = builder.RawFieldNames(&Organizations{})
	organizationsRows                = strings.Join(organizationsFieldNames, ",")
	organizationsRowsExpectAutoSet   = strings.Join(stringx.Remove(organizationsFieldNames, "`org_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	organizationsRowsWithPlaceHolder = strings.Join(stringx.Remove(organizationsFieldNames, "`org_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	organizationsModel interface {
		Insert(ctx context.Context, data *Organizations) (sql.Result, error)
		FindOne(ctx context.Context, orgId uint64) (*Organizations, error)
		Update(ctx context.Context, data *Organizations) error
		Delete(ctx context.Context, orgId uint64) error
	}

	defaultOrganizationsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Organizations struct {
		OrgId     uint64        `db:"org_id"`
		OrgName   string        `db:"org_name"`
		CreatedAt time.Time     `db:"created_at"`
		CreatedBy sql.NullInt64 `db:"created_by"`
	}
)

func newOrganizationsModel(conn sqlx.SqlConn) *defaultOrganizationsModel {
	return &defaultOrganizationsModel{
		conn:  conn,
		table: "`organizations`",
	}
}

func (m *defaultOrganizationsModel) Delete(ctx context.Context, orgId uint64) error {
	query := fmt.Sprintf("delete from %s where `org_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, orgId)
	return err
}

func (m *defaultOrganizationsModel) FindOne(ctx context.Context, orgId uint64) (*Organizations, error) {
	query := fmt.Sprintf("select %s from %s where `org_id` = ? limit 1", organizationsRows, m.table)
	var resp Organizations
	err := m.conn.QueryRowCtx(ctx, &resp, query, orgId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrganizationsModel) Insert(ctx context.Context, data *Organizations) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, organizationsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrgName, data.CreatedBy)
	return ret, err
}

func (m *defaultOrganizationsModel) Update(ctx context.Context, data *Organizations) error {
	query := fmt.Sprintf("update %s set %s where `org_id` = ?", m.table, organizationsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrgName, data.CreatedBy, data.OrgId)
	return err
}

func (m *defaultOrganizationsModel) tableName() string {
	return m.table
}
