// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	regionsFieldNames          = builder.RawFieldNames(&Regions{})
	regionsRows                = strings.Join(regionsFieldNames, ",")
	regionsRowsExpectAutoSet   = strings.Join(stringx.Remove(regionsFieldNames, "`region_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	regionsRowsWithPlaceHolder = strings.Join(stringx.Remove(regionsFieldNames, "`region_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	regionsModel interface {
		Insert(ctx context.Context, data *Regions) (sql.Result, error)
		FindOne(ctx context.Context, regionId uint64) (*Regions, error)
		Update(ctx context.Context, data *Regions) error
		Delete(ctx context.Context, regionId uint64) error
	}

	defaultRegionsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Regions struct {
		RegionId   uint64    `db:"region_id"`
		RegionName string    `db:"region_name"` // 地区名称
		CreatedAt  time.Time `db:"created_at"`
		UpdatedAt  time.Time `db:"updated_at"`
		RegionCode string    `db:"region_code"` // 地址
	}
)

func newRegionsModel(conn sqlx.SqlConn) *defaultRegionsModel {
	return &defaultRegionsModel{
		conn:  conn,
		table: "`regions`",
	}
}

func (m *defaultRegionsModel) Delete(ctx context.Context, regionId uint64) error {
	query := fmt.Sprintf("delete from %s where `region_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, regionId)
	return err
}

func (m *defaultRegionsModel) FindOne(ctx context.Context, regionId uint64) (*Regions, error) {
	query := fmt.Sprintf("select %s from %s where `region_id` = ? limit 1", regionsRows, m.table)
	var resp Regions
	err := m.conn.QueryRowCtx(ctx, &resp, query, regionId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRegionsModel) Insert(ctx context.Context, data *Regions) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, regionsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RegionName, data.RegionCode)
	return ret, err
}

func (m *defaultRegionsModel) Update(ctx context.Context, data *Regions) error {
	query := fmt.Sprintf("update %s set %s where `region_id` = ?", m.table, regionsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.RegionName, data.RegionCode, data.RegionId)
	return err
}

func (m *defaultRegionsModel) tableName() string {
	return m.table
}
