// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	resourcesUserFieldNames          = builder.RawFieldNames(&ResourcesUser{})
	resourcesUserRows                = strings.Join(resourcesUserFieldNames, ",")
	resourcesUserRowsExpectAutoSet   = strings.Join(stringx.Remove(resourcesUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	resourcesUserRowsWithPlaceHolder = strings.Join(stringx.Remove(resourcesUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	resourcesUserModel interface {
		Insert(ctx context.Context, data *ResourcesUser) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ResourcesUser, error)
		Update(ctx context.Context, data *ResourcesUser) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultResourcesUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ResourcesUser struct {
		Id           uint64       `db:"id"`
		UserId       uint64       `db:"user_id"`       // 用户ID
		ResourceId   uint64       `db:"resource_id"`   // 使用资源类型ID
		OrgId        uint64       `db:"org_id"`        // 组织ID
		ResourceType string       `db:"resource_type"` // 使用资源类型CPU,MEM,GPU,SSD,NET
		Qty          uint64       `db:"qty"`           // 使用数量
		Stat         string       `db:"stat"`          // 状态 init,start,stop
		StartAt      sql.NullTime `db:"start_at"`      // 启动时间
		StopAt       sql.NullTime `db:"stop_at"`       // 停止时间
		CreatedAt    time.Time    `db:"created_at"`
	}
)

func newResourcesUserModel(conn sqlx.SqlConn) *defaultResourcesUserModel {
	return &defaultResourcesUserModel{
		conn:  conn,
		table: "`resources_user`",
	}
}

func (m *defaultResourcesUserModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultResourcesUserModel) FindOne(ctx context.Context, id uint64) (*ResourcesUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", resourcesUserRows, m.table)
	var resp ResourcesUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultResourcesUserModel) Insert(ctx context.Context, data *ResourcesUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, resourcesUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ResourceId, data.OrgId, data.ResourceType, data.Qty, data.Stat, data.StartAt, data.StopAt)
	return ret, err
}

func (m *defaultResourcesUserModel) Update(ctx context.Context, data *ResourcesUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, resourcesUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ResourceId, data.OrgId, data.ResourceType, data.Qty, data.Stat, data.StartAt, data.StopAt, data.Id)
	return err
}

func (m *defaultResourcesUserModel) tableName() string {
	return m.table
}
