// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	webConfigFieldNames          = builder.RawFieldNames(&WebConfig{})
	webConfigRows                = strings.Join(webConfigFieldNames, ",")
	webConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(webConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	webConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(webConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	webConfigModel interface {
		Insert(ctx context.Context, data *WebConfig) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WebConfig, error)
		Update(ctx context.Context, data *WebConfig) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWebConfigModel struct {
		conn  sqlx.SqlConn
		table string
	}

	WebConfig struct {
		Id     int64  `db:"id"`     // Primary Key
		Config string `db:"config"` // config
	}
)

func newWebConfigModel(conn sqlx.SqlConn) *defaultWebConfigModel {
	return &defaultWebConfigModel{
		conn:  conn,
		table: "`web_config`",
	}
}

func (m *defaultWebConfigModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultWebConfigModel) FindOne(ctx context.Context, id int64) (*WebConfig, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", webConfigRows, m.table)
	var resp WebConfig
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWebConfigModel) Insert(ctx context.Context, data *WebConfig) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, webConfigRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Config)
	return ret, err
}

func (m *defaultWebConfigModel) Update(ctx context.Context, data *WebConfig) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, webConfigRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Config, data.Id)
	return err
}

func (m *defaultWebConfigModel) tableName() string {
	return m.table
}
