// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	resourceDiscountsFieldNames          = builder.RawFieldNames(&ResourceDiscounts{})
	resourceDiscountsRows                = strings.Join(resourceDiscountsFieldNames, ",")
	resourceDiscountsRowsExpectAutoSet   = strings.Join(stringx.Remove(resourceDiscountsFieldNames, "`discount_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	resourceDiscountsRowsWithPlaceHolder = strings.Join(stringx.Remove(resourceDiscountsFieldNames, "`discount_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	resourceDiscountsModel interface {
		Insert(ctx context.Context, data *ResourceDiscounts) (sql.Result, error)
		FindOne(ctx context.Context, discountId uint64) (*ResourceDiscounts, error)
		Update(ctx context.Context, data *ResourceDiscounts) error
		Delete(ctx context.Context, discountId uint64) error
	}

	defaultResourceDiscountsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ResourceDiscounts struct {
		DiscountId      uint64    `db:"discount_id"`      // 折扣ID
		OrgId           uint64    `db:"org_id"`           // 组织ID, 只用于区别不同组织的展示
		Memo            string    `db:"memo"`             // 备注
		MinDiscount     int64     `db:"min_discount"`     // 100 表示 10 折
		DailyDiscount   int64     `db:"daily_discount"`   // 100 表示 10 折
		MonthlyDiscount int64     `db:"monthly_discount"` // 100 表示 10 折
		YearlyDiscount  int64     `db:"yearly_discount"`  // 100 表示 10 折
		CreatedAt       time.Time `db:"created_at"`
		UpdatedAt       time.Time `db:"updated_at"`
		HourlyDiscount  int64     `db:"hourly_discount"` // 100 表示 10 折
	}
)

func newResourceDiscountsModel(conn sqlx.SqlConn) *defaultResourceDiscountsModel {
	return &defaultResourceDiscountsModel{
		conn:  conn,
		table: "`resource_discounts`",
	}
}

func (m *defaultResourceDiscountsModel) Delete(ctx context.Context, discountId uint64) error {
	query := fmt.Sprintf("delete from %s where `discount_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, discountId)
	return err
}

func (m *defaultResourceDiscountsModel) FindOne(ctx context.Context, discountId uint64) (*ResourceDiscounts, error) {
	query := fmt.Sprintf("select %s from %s where `discount_id` = ? limit 1", resourceDiscountsRows, m.table)
	var resp ResourceDiscounts
	err := m.conn.QueryRowCtx(ctx, &resp, query, discountId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultResourceDiscountsModel) Insert(ctx context.Context, data *ResourceDiscounts) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, resourceDiscountsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrgId, data.Memo, data.MinDiscount, data.DailyDiscount, data.MonthlyDiscount, data.YearlyDiscount, data.HourlyDiscount)
	return ret, err
}

func (m *defaultResourceDiscountsModel) Update(ctx context.Context, data *ResourceDiscounts) error {
	query := fmt.Sprintf("update %s set %s where `discount_id` = ?", m.table, resourceDiscountsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrgId, data.Memo, data.MinDiscount, data.DailyDiscount, data.MonthlyDiscount, data.YearlyDiscount, data.HourlyDiscount, data.DiscountId)
	return err
}

func (m *defaultResourceDiscountsModel) tableName() string {
	return m.table
}
