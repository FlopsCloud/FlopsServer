// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bucketsFieldNames          = builder.RawFieldNames(&Buckets{})
	bucketsRows                = strings.Join(bucketsFieldNames, ",")
	bucketsRowsExpectAutoSet   = strings.Join(stringx.Remove(bucketsFieldNames, "`bucket_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bucketsRowsWithPlaceHolder = strings.Join(stringx.Remove(bucketsFieldNames, "`bucket_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bucketsModel interface {
		Insert(ctx context.Context, data *Buckets) (sql.Result, error)
		FindOne(ctx context.Context, bucketId uint64) (*Buckets, error)
		Update(ctx context.Context, data *Buckets) error
		Delete(ctx context.Context, bucketId uint64) error
	}

	defaultBucketsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Buckets struct {
		BucketId   uint64       `db:"bucket_id"`   // 桶ID
		BucketName string       `db:"bucket_name"` // 桶名称
		UserId     uint64       `db:"user_id"`
		Region     string       `db:"region"`     // 区域
		IsDeleted  int64        `db:"is_deleted"` // 是否删除
		DeletedAt  sql.NullTime `db:"deleted_at"` // 删除时间
		CreatedAt  time.Time    `db:"created_at"`
		UpdatedAt  time.Time    `db:"updated_at"`
	}
)

func newBucketsModel(conn sqlx.SqlConn) *defaultBucketsModel {
	return &defaultBucketsModel{
		conn:  conn,
		table: "`buckets`",
	}
}

func (m *defaultBucketsModel) Delete(ctx context.Context, bucketId uint64) error {
	query := fmt.Sprintf("delete from %s where `bucket_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, bucketId)
	return err
}

func (m *defaultBucketsModel) FindOne(ctx context.Context, bucketId uint64) (*Buckets, error) {
	query := fmt.Sprintf("select %s from %s where `bucket_id` = ? limit 1", bucketsRows, m.table)
	var resp Buckets
	err := m.conn.QueryRowCtx(ctx, &resp, query, bucketId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBucketsModel) Insert(ctx context.Context, data *Buckets) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, bucketsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BucketName, data.UserId, data.Region, data.IsDeleted, data.DeletedAt)
	return ret, err
}

func (m *defaultBucketsModel) Update(ctx context.Context, data *Buckets) error {
	query := fmt.Sprintf("update %s set %s where `bucket_id` = ?", m.table, bucketsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.BucketName, data.UserId, data.Region, data.IsDeleted, data.DeletedAt, data.BucketId)
	return err
}

func (m *defaultBucketsModel) tableName() string {
	return m.table
}
