// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	objectsTreeFieldNames          = builder.RawFieldNames(&ObjectsTree{})
	objectsTreeRows                = strings.Join(objectsTreeFieldNames, ",")
	objectsTreeRowsExpectAutoSet   = strings.Join(stringx.Remove(objectsTreeFieldNames, "`tree_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	objectsTreeRowsWithPlaceHolder = strings.Join(stringx.Remove(objectsTreeFieldNames, "`tree_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	objectsTreeModel interface {
		Insert(ctx context.Context, data *ObjectsTree) (sql.Result, error)
		FindOne(ctx context.Context, treeId uint64) (*ObjectsTree, error)
		FindOneByFullTreeNameBucketId(ctx context.Context, fullTreeName string, bucketId uint64) (*ObjectsTree, error)
		Update(ctx context.Context, data *ObjectsTree) error
		Delete(ctx context.Context, treeId uint64) error
	}

	defaultObjectsTreeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ObjectsTree struct {
		TreeId       uint64    `db:"tree_id"`        // 树ID
		BucketId     uint64    `db:"bucket_id"`      // 桶ID
		ParantTreeId uint64    `db:"parant_tree_id"` // 父亲ID
		TreeName     string    `db:"tree_name"`      // 名称
		FullTreeName string    `db:"full_tree_name"` // 名称
		CreatedAt    time.Time `db:"created_at"`     // 名称
	}
)

func newObjectsTreeModel(conn sqlx.SqlConn) *defaultObjectsTreeModel {
	return &defaultObjectsTreeModel{
		conn:  conn,
		table: "`objects_tree`",
	}
}

func (m *defaultObjectsTreeModel) Delete(ctx context.Context, treeId uint64) error {
	query := fmt.Sprintf("delete from %s where `tree_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, treeId)
	return err
}

func (m *defaultObjectsTreeModel) FindOne(ctx context.Context, treeId uint64) (*ObjectsTree, error) {
	query := fmt.Sprintf("select %s from %s where `tree_id` = ? limit 1", objectsTreeRows, m.table)
	var resp ObjectsTree
	err := m.conn.QueryRowCtx(ctx, &resp, query, treeId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultObjectsTreeModel) FindOneByFullTreeNameBucketId(ctx context.Context, fullTreeName string, bucketId uint64) (*ObjectsTree, error) {
	var resp ObjectsTree
	query := fmt.Sprintf("select %s from %s where `full_tree_name` = ? and `bucket_id` = ? limit 1", objectsTreeRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, fullTreeName, bucketId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultObjectsTreeModel) Insert(ctx context.Context, data *ObjectsTree) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, objectsTreeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BucketId, data.ParantTreeId, data.TreeName, data.FullTreeName)
	return ret, err
}

func (m *defaultObjectsTreeModel) Update(ctx context.Context, newData *ObjectsTree) error {
	query := fmt.Sprintf("update %s set %s where `tree_id` = ?", m.table, objectsTreeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.BucketId, newData.ParantTreeId, newData.TreeName, newData.FullTreeName, newData.TreeId)
	return err
}

func (m *defaultObjectsTreeModel) tableName() string {
	return m.table
}
