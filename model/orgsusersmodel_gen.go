// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orgsUsersFieldNames          = builder.RawFieldNames(&OrgsUsers{})
	orgsUsersRows                = strings.Join(orgsUsersFieldNames, ",")
	orgsUsersRowsExpectAutoSet   = strings.Join(stringx.Remove(orgsUsersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orgsUsersRowsWithPlaceHolder = strings.Join(stringx.Remove(orgsUsersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	orgsUsersModel interface {
		Insert(ctx context.Context, data *OrgsUsers) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*OrgsUsers, error)
		FindOneByOrgIdUserId(ctx context.Context, orgId uint64, userId uint64) (*OrgsUsers, error)
		FindAllByUserId(ctx context.Context,   userId uint64) (*[]Org, error)
		Update(ctx context.Context, data *OrgsUsers) error
		Delete(ctx context.Context, id uint64) error
		DeleteEx(ctx context.Context, uid uint64,oid uint64) error
	}

	defaultOrgsUsersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OrgsUsers struct {
		Id        uint64    `db:"id"`
		OrgId     uint64    `db:"org_id"`
		UserId    uint64    `db:"user_id"`
		Role      string    `db:"role"` // 岗位
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newOrgsUsersModel(conn sqlx.SqlConn) *defaultOrgsUsersModel {
	return &defaultOrgsUsersModel{
		conn:  conn,
		table: "`orgs_users`",
	}
}

func (m *defaultOrgsUsersModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOrgsUsersModel) FindOne(ctx context.Context, id uint64) (*OrgsUsers, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orgsUsersRows, m.table)
	var resp OrgsUsers
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrgsUsersModel) FindOneByOrgIdUserId(ctx context.Context, orgId uint64, userId uint64) (*OrgsUsers, error) {
	var resp OrgsUsers
	query := fmt.Sprintf("select %s from %s where `org_id` = ? and `user_id` = ? limit 1", orgsUsersRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, orgId, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrgsUsersModel) Insert(ctx context.Context, data *OrgsUsers) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, orgsUsersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrgId, data.UserId, data.Role)
	return ret, err
}

func (m *defaultOrgsUsersModel) Update(ctx context.Context, newData *OrgsUsers) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orgsUsersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.OrgId, newData.UserId, newData.Role, newData.Id)
	return err
}

func (m *defaultOrgsUsersModel) tableName() string {
	return m.table
}
