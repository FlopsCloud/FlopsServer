// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2

package handler

import (
	"net/http"
	"time"

	page "fca/api/internal/handler/page"
	"fca/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/recharge/callbackWeixin",
				Handler: CallbackRechargeWeixinHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/server/tag/add",
				Handler: AddServerTagHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/server/tag/del",
				Handler: DeleteServerTagHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/server/tags",
				Handler: ServerTagHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/sys/hello/:name",
				Handler: HelloHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/sys/info",
				Handler: InfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/sys/ping",
				Handler: PingHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user/captcha",
				Handler: CaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/emailcodelogin",
				Handler: EmailcodeloginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/phonecodelogin",
				Handler: PhonecodeloginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/sendemailcode",
				Handler: SendemailcodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/sendphonecode",
				Handler: SendphonecodeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
		rest.WithTimeout(15000*time.Millisecond),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthInterceptor},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/admin/recharge/approve-reject",
					Handler: ApproveRejectRechargeOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/admin/recharge/list",
					Handler: ListAllRechargeOrdersHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/admin/user/adjust-balance",
					Handler: AdjustUserBalanceHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/admin/user/delete",
					Handler: AdminUserDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/admin/user/list",
					Handler: AdminUserListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/basedata/List",
					Handler: BaseDataListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/basedata/create",
					Handler: CreateBaseDataHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/basedata/delete",
					Handler: DeleteBaseDataHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/basedata/filter",
					Handler: BaseDataFilterHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/basedata/update",
					Handler: UpdateBaseDataHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/instance/create",
					Handler: CreateInstanceHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/instance/delete/:instanceId",
					Handler: DeleteInstanceHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/instance/list",
					Handler: ListInstancesHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/instance/start",
					Handler: StartInstancesHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/instance/stop",
					Handler: StopInstancesHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/instance/terminate",
					Handler: TerminateInstancesHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/instance/update",
					Handler: UpdateInstanceHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/orders/list",
					Handler: ListOrderRecordsHandler(serverCtx),
				},
				{
					// Add a user to an organization
					Method:  http.MethodPost,
					Path:    "/org/adduser",
					Handler: AddUserToOrgHandler(serverCtx),
				},
				{
					// User applies to join an organization
					Method:  http.MethodPost,
					Path:    "/org/applyjoin",
					Handler: ApplyToJoinOrgHandler(serverCtx),
				},
				{
					// Invite a user to join an organization
					Method:  http.MethodPost,
					Path:    "/org/inviteuser",
					Handler: OrgInviteUserHandler(serverCtx),
				},
				{
					// User leave an organization
					Method:  http.MethodPost,
					Path:    "/org/leave",
					Handler: LeaveOrgHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/recharge/create",
					Handler: CreateRechargeOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/server/create",
					Handler: CreateServerHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/server/list",
					Handler: ServerListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/server/update",
					Handler: UpdateServerHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/transactions/list",
					Handler: ListTransactionRecordsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user/balance",
					Handler: GetUserBalanceHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/info",
					Handler: UserHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/user/info",
					Handler: UpdateUserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user/keepalive",
					Handler: KeepAliveHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/recharge/history",
					Handler: ListRechargeHistoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/resetpass",
					Handler: ResetPassHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
		rest.WithTimeout(15000*time.Millisecond),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthInterceptor},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/permission/:id",
					Handler: GetPermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/permission/create",
					Handler: CreatePermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/permission/delete/:id",
					Handler: DeletePermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/permission/list",
					Handler: ListPermissionsHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/permission/update",
					Handler: UpdatePermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/role/:id",
					Handler: GetRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/role/create",
					Handler: CreateRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/role/delete/:id",
					Handler: DeleteRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/role/list",
					Handler: ListRolesHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/role/update",
					Handler: UpdateRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/role/assign",
					Handler: AssignRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/role/revoke",
					Handler: RevokeRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/roles",
					Handler: GetUserRolesHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
		rest.WithTimeout(15000*time.Millisecond),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthInterceptor},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/resource/create",
					Handler: CreateResourceHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/resource/delete/:id",
					Handler: DeleteResourceHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/resource/list",
					Handler: ListResourcesHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/resource/update",
					Handler: UpdateResourceHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/usage/daily/list",
					Handler: ListDailyUsageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/usage/minute/list",
					Handler: ListMinuteUsageHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
		rest.WithTimeout(15000*time.Millisecond),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthInterceptor},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/Resource/org/add",
					Handler: AddResourceOrgHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/Resource/org/delete",
					Handler: DeleteResourceOrgHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bucket/create",
					Handler: CreateBucketHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bucket/delete",
					Handler: DeleteBucketHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bucket/get",
					Handler: GetBucketHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bucket/list",
					Handler: ListBucketHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bucket/update",
					Handler: UpdateBucketHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/discount/create",
					Handler: CreateDiscountHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/discount/delete",
					Handler: DeleteDiscountHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/discount/get",
					Handler: GetDiscountHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/discount/list",
					Handler: ListDiscountHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/discount/update",
					Handler: UpdateDiscountHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/image/create",
					Handler: CreateImageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/image/delete",
					Handler: DeleteImageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/image/get",
					Handler: GetImageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/image/list",
					Handler: ListImagesHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/image/update",
					Handler: UpdateImageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/instance/log/create",
					Handler: CreateInstanceLogHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/instance/log/list",
					Handler: ListInstanceLogHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/instance/log/stop",
					Handler: StopInstanceLogHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/object/create",
					Handler: CreateObjectHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/object/delete",
					Handler: DeleteObjectHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/object/get",
					Handler: GetObjectHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/object/list",
					Handler: ListObjectHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/object/update",
					Handler: UpdateObjectHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/object/uploadObject",
					Handler: UploadObjectHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/resource/user/create",
					Handler: CreateResourceUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/resource/user/list",
					Handler: ListResourceUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/resource/user/start",
					Handler: StartResourceUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/resource/user/stop",
					Handler: StopResourceUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/server/org/add",
					Handler: AddServerOrgHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/server/org/delete",
					Handler: DeleteServerOrgHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/serverdiscount/create",
					Handler: CreateServerDiscountHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/serverdiscount/delete",
					Handler: DeleteServerDiscountHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/serverdiscount/get",
					Handler: GetServerDiscountHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/serverdiscount/list",
					Handler: ListServerDiscountHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/serverdiscount/update",
					Handler: UpdateServerDiscountHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
		rest.WithTimeout(15000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/x/callback",
				Handler: XCallbackHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/x/login",
				Handler: XLoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
		rest.WithTimeout(15000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/static/:file",
				Handler: DownloadHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/upload",
				Handler: UploadHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/google/callback",
				Handler: GoogleCallbackHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/google/login",
				Handler: GoogleLoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
		rest.WithTimeout(15000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// Get home page
				Method:  http.MethodGet,
				Path:    "/",
				Handler: page.GetHomeHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// Get Privacy policy
				Method:  http.MethodGet,
				Path:    "/doc/pp",
				Handler: page.GetPPHandler(serverCtx),
			},
			{
				// Get TOC
				Method:  http.MethodGet,
				Path:    "/doc/toc",
				Handler: page.GetTocHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
		rest.WithTimeout(15000*time.Millisecond),
	)
}
